#include <nxt.h>
#include <dlfcn.h>
#include <stdarg.h>

ChNXT::ChNXT() {
    void *fptr;

    /* here to load the dynamically loaded library if necessary.
     * g_chnxt_dlhandle is a globle pointer pointing to the loaded DLL
     * g_chnxt_dlcount is a global int counting instances for all classess */

    if(g_chnxt_dlhandle == NULL || g_chnxt_dlcount == 0){
        g_chnxt_dlhandle = dlopen("libnxt.dl", RTLD_LAZY);
        if(g_chnxt_dlhandle == NULL){
            printf("Error: dlopen(): %s\n", dlerror());
        }
    }

    /* to get the address by function name */
    fptr = dlsym(g_chnxt_dlhandle, "ChNXT_ChNXT_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
    }

    /* to call the chdl function in dynamically loaded library by address */
    dlrunfun(fptr, NULL, NULL);
    g_chnxt_dlcount++;
}

ChNXT::~ChNXT() {
    void *fptr;

    fptr = dlsym(g_chnxt_dlhandle, "ChNXT_dChNXT_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
    }

    /* call the chdl function in DLL by address */
    dlrunfun(fptr, NULL, NULL, this);
    if(g_chnxt_dlcount <= 0 && g_chnxt_dlhandle != NULL){
        if(dlclose(g_chnxt_dlhandle) != 0)
            printf("Error: dlclose(): %s\n", dlerror());
    }
}

int ChNXT::connect() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "connect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, connect);
    return retval;
}

int ChNXT::connectWithAddress(char *usr_addr, int channel) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "connectWithAddress_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, connectWithAddress, this, usr_addr, channel);
    return retval;
}

int ChNXT::disconnect() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "disconnect_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, disconnect);
    return retval;
}

int ChNXT::getMotorAngle(nxtMotorId_t id, double &angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "getMotorAngle_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &angle);
    return retval;
}

int ChNXT::getMotorSpeed(nxtMotorId_t id, int &speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "getMotorSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &speed);
    return retval;
}

int ChNXT::getMotorSpeeds(int &speed1, int &speed2, int &speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "getMotorSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &speed1, &speed2, &speed3);
    return retval;
}

int ChNXT::getMotorSpeedRatio(nxtMotorId_t id, double &ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "getMotorSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &ratio);
    return retval;
}

int ChNXT::getMotorSpeedRatios(double &ratio1, double &ratio2, double &ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "getMotorSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, &ratio1, &ratio2, &ratio3);
    return retval;
}

int ChNXT::getMotorState(nxtMotorId_t id, int &status) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "getMotorState_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &status);
    return retval;
}

int ChNXT::getSensor(nxtSensorId_t id, int &value) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "getSensor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, id, &value);
    return retval;
}

int ChNXT::isConnected() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "isConnected_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, isConnected);
    return retval;
}

int ChNXT::isMotorMoving(nxtMotorId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "isMotorMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMotorMoving, this, id);
    return retval;
}

int ChNXT::isMoving() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "isMoving_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, isMoving);
    return retval;
}

int ChNXT::move(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "move_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, move, this, angle1, angle2, angle3);
    return retval;
}

int ChNXT::moveContinuousNB(nxtMotorState_t dir1, nxtMotorState_t dir2, nxtMotorState_t dir3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousNB, this, dir1, dir2, dir3);
    return retval;
}

int ChNXT::moveContinuousTime(nxtMotorState_t dir1, nxtMotorState_t dir2, nxtMotorState_t dir, double seconds) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveContinuousTime_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveContinuousTime, this, dir1, dir2, dir, seconds);
    return retval;
}
int ChNXT::moveMotor(nxtMotorId_t id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveMotor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveMotor, this, id, angle);
    return retval;
}

int ChNXT::moveMotorContinuousNB(nxtMotorId_t id, nxtMotorState_t dir) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveMotorContinuousNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveMotorContinuousNB, this, id, dir);
    return retval;
}

int ChNXT::moveMotorNB(nxtMotorId_t id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveMotorNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveMotorNB, this, id, angle);
    return retval;
}
int ChNXT::moveMotorTo(nxtMotorId_t id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveMotorTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveMotorTo, this, id, angle);
    return retval;
}

int ChNXT::moveMotorToNB(nxtMotorId_t id, double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveMotorToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveMotorToNB, this, id, angle);
    return retval;
}
int ChNXT::moveMotorWait(nxtMotorId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveMotorWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveMotorWait, this, id);
    return retval;
}

int ChNXT::moveNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveNB, this, angle1, angle2, angle3);
    return retval;
}

int ChNXT::moveTo(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveTo_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveTo, this, angle1, angle2, angle3);
    return retval;
}

int ChNXT::moveToNB(double angle1, double angle2, double angle3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveToNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, moveToNB, this, angle1, angle2, angle3);
    return retval;
}

int ChNXT::moveToZero() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, moveToZero);
    return retval;
}

int ChNXT::moveToZeroNB() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveToZeroNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, moveToZeroNB);
    return retval;
}

int ChNXT::moveWait() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "moveWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, moveWait);
    return retval;
}

int ChNXT::setMotorSpeed(nxtMotorId_t id, int speed) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "setMotorSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorSpeed, this, id, speed);
    return retval;
}

int ChNXT::setMotorSpeeds(int speed1, int speed2, int speed3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "setMotorSpeeds_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorSpeeds, this, speed1, speed2, speed3);
    return retval;
}

int ChNXT::setMotorSpeedRatio(nxtMotorId_t id, double ratio) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "setMotorSpeedRatio_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorSpeedRatio, this, id, ratio);
    return retval;
}

int ChNXT::setMotorSpeedRatios(double ratio1, double ratio2, double ratio3) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "setMotorSpeedRatios_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorSpeedRatios, this, ratio1, ratio2, ratio3);
    return retval;
}

int ChNXT::setMotorToZero(nxtMotorId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "setMotorToZero_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setMotorToZero, this, id);
    return retval;
}

int ChNXT::setMotorZeros() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "setMotorZeros_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, setMotorZeros);
    return retval;
}

int ChNXT::setSensor(nxtSensorId_t id, nxtSensorType_t type, nxtSensorMode_t mode) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "setSensor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setSensor, this, id, type, mode);
    return retval;
}

int ChNXT::stopAllMotors() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "stopAllMotors_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, stopAllMotors);
    return retval;
}

int ChNXT::stopMotion() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "stopMotion_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, stopMotion);
    return retval;
}

int ChNXT::stopOneMotor(nxtMotorId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "stopOneMotor_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopOneMotor, this, id);
    return retval;
}

int ChNXT::stopTwoMotors(nxtMotorId_t id1, nxtMotorId_t id2) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "stopTwoMotors_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, stopTwoMotors, this, id1, id2);
    return retval;
}

int ChNXT::vehicleMotionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "vehicleMotionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, vehicleMotionWait);
    return retval;
}

int ChNXT::humanoidMotionWait() {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "humanoidMotionWait_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, NULL, this, humanoidMotionWait);
    return retval;
}

int ChNXT::humanoidWalkBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "humanoidWalkBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, humanoidWalkBackward, this, angle);
    return retval;
}

/*
   int ChNXT::humanoidWalkBackwardNB(double angle) {
   void *fptr;
   int retval;

   fptr = dlsym(g_chnxt_dlhandle, "humanoidWalkBackwardNB_chdl");
   if(fptr == NULL) {
   fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
   return -1;
   }
   dlrunfun(fptr, &retval, humanoidWalkBackwardNB, this, angle);
   return retval;
   }
   */

int ChNXT::vehicleRollBackward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "vehicleRollBackward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, vehicleRollBackward, this, angle);
    return retval;
}

int ChNXT::vehicleRollBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "vehicleRollBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, vehicleRollBackwardNB, this, angle);
    return retval;
}

int ChNXT::vehicleRollForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "vehicleRollForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, vehicleRollForward, this, angle);
    return retval;
}

int ChNXT::vehicleRollForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "vehicleRollForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, vehicleRollForwardNB, this, angle);
    return retval;
}

int ChNXT::humanoidWalkForward(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "humanoidWalkForward_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, humanoidWalkForward, this, angle);
    return retval;
}

int ChNXT::humanoidWalkForwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "humanoidWalkForwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, humanoidWalkForwardNB, this, angle);
    return retval;
}

int ChNXT::humanoidWalkBackwardNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "humanoidWalkBackwardNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, humanoidWalkBackwardNB, this, angle);
    return retval;
}
int ChNXT::vehicleRotateLeft(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "vehicleRotateLeft_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, vehicleRotateLeft, this, angle);
    return retval;
}

int ChNXT::vehicleRotateLeftNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "vehicleRotateLeftNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, vehicleRotateLeftNB, this, angle);
    return retval;
}

int ChNXT::vehicleRotateRight(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "vehicleRotateRight_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, vehicleRotateRight, this, angle);
    return retval;
}

int ChNXT::vehicleRotateRightNB(double angle) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "vehicleRotateRightNB_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, vehicleRotateRightNB, this, angle);
    return retval;
}

int ChNXT::setTwoWheelRobotSpeed(double speed, double radius){
	void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "setTwoWheelRobotSpeed_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, setTwoWheelRobotSpeed, this, speed, radius);
    return retval;
}

/* int ChNXT::testBluetoothCom(void) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "testBluetoothCom_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, testBluetoothCom, this);
    return retval;
}*/

/*int ChNXT::isMotorReady(nxtMotorId_t id) {
    void *fptr;
    int retval;

    fptr = dlsym(g_chnxt_dlhandle, "isMotorReady_chdl");
    if(fptr == NULL) {
        fprintf(_stderr, "Error: %s(): dlsym(): %s\n", __func__,  dlerror());
        return -1;
    }
    dlrunfun(fptr, &retval, isMotorReady, this, id);
    return retval;
}*/
