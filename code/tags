!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ABS	mobot_new.cpp	43;"	d	file:
AF_BLUETOOTH	mobot_internal.h	18;"	d
AF_BLUETOOTH	nxt_internal.h	25;"	d
BR_COMMS_S	mobot_internal.h	27;"	d
BR_COMMS_S	nxt_internal.h	34;"	d
BTCMD	commands.h	28;"	d
BTPROTO_RFCOMM	mobot_internal.h	19;"	d
BTPROTO_RFCOMM	nxt_internal.h	26;"	d
B_ARMDOWN	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_ARMDOWN,$/;"	e	enum:button_e
B_ARMLEFT	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_ARMLEFT,$/;"	e	enum:button_e
B_ARMRIGHT	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_ARMRIGHT,$/;"	e	enum:button_e
B_ARMSTOP	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_ARMSTOP,$/;"	e	enum:button_e
B_ARMUP	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_ARMUP,   \/\/ machine commands$/;"	e	enum:button_e
B_BACK	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_BACK,$/;"	e	enum:button_e
B_CLAWCLOSE	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_CLAWCLOSE,$/;"	e	enum:button_e
B_CLAWOPEN	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_CLAWOPEN,$/;"	e	enum:button_e
B_FORWARD	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_FORWARD, \/\/ Roll commands$/;"	e	enum:button_e
B_LEFT	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_LEFT,$/;"	e	enum:button_e
B_M1B	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_M1B, \/\/ Motor Backward$/;"	e	enum:button_e
B_M1F	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_M1F, \/\/ Motor forward$/;"	e	enum:button_e
B_M1S	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_M1S, \/\/ Motor stop$/;"	e	enum:button_e
B_M2B	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_M2B,$/;"	e	enum:button_e
B_M2F	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_M2F,$/;"	e	enum:button_e
B_M2S	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_M2S,$/;"	e	enum:button_e
B_M3B	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_M3B,$/;"	e	enum:button_e
B_M3F	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_M3F,$/;"	e	enum:button_e
B_M3S	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_M3S,$/;"	e	enum:button_e
B_MOVE	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_MOVE,$/;"	e	enum:button_e
B_MOVETOZERO	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_MOVETOZERO,$/;"	e	enum:button_e
B_NUMBUTTONS	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_NUMBUTTONS$/;"	e	enum:button_e
B_RESETTOZERO	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_RESETTOZERO,$/;"	e	enum:button_e
B_RIGHT	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_RIGHT,$/;"	e	enum:button_e
B_SETPOS	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_SETPOS,$/;"	e	enum:button_e
B_SETSPD	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_SETSPD,$/;"	e	enum:button_e
B_STOP	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_STOP,$/;"	e	enum:button_e
B_WALKBACK	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_WALKBACK,$/;"	e	enum:button_e
B_WALKFOR	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_WALKFOR, \/\/ Walk commands$/;"	e	enum:button_e
B_WALKSTOP	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  B_WALKSTOP,$/;"	e	enum:button_e
CALLBACK_ARG_S	mobot_internal.h	65;"	d
CALLBACK_ARG_S	nxt_internal.h	75;"	d
CAboutDlg	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	c	file:
CAboutDlg	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CAboutDlg
CListCtrlContext	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlContext.cpp	/^CListCtrlContext::CListCtrlContext(void)$/;"	f	class:CListCtrlContext
CListCtrlContext	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlContext.h	/^class CListCtrlContext :$/;"	c
CListCtrlCtx	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlCtx.cpp	/^CListCtrlCtx::CListCtrlCtx()$/;"	f	class:CListCtrlCtx
CListCtrlCtx	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlCtx.h	/^class CListCtrlCtx : public CListCtrl$/;"	c
CMD_BLINKLED	commands.h	/^  CMD_BLINKLED,$/;"	e	enum:protocol_commands_e
CMD_DEMO	commands.h	/^  CMD_DEMO,$/;"	e	enum:protocol_commands_e
CMD_ENABLEBUTTONHANDLER	commands.h	/^  CMD_ENABLEBUTTONHANDLER,$/;"	e	enum:protocol_commands_e
CMD_GETBUTTONVOLTAGE	commands.h	/^  CMD_GETBUTTONVOLTAGE,$/;"	e	enum:protocol_commands_e
CMD_GETENCODERVOLTAGE	commands.h	/^  CMD_GETENCODERVOLTAGE,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORANGLE	commands.h	/^  CMD_GETMOTORANGLE,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORANGLEABS	commands.h	/^  CMD_GETMOTORANGLEABS,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORANGLES	commands.h	/^  CMD_GETMOTORANGLES,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORANGLESABS	commands.h	/^  CMD_GETMOTORANGLESABS,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORANGLESTIMESTAMP	commands.h	/^  CMD_GETMOTORANGLESTIMESTAMP,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORANGLESTIMESTAMPABS	commands.h	/^  CMD_GETMOTORANGLESTIMESTAMPABS,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORANGLETIMESTAMP	commands.h	/^  CMD_GETMOTORANGLETIMESTAMP,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORDIR	commands.h	/^  CMD_GETMOTORDIR,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORMAXSPEED	commands.h	/^  CMD_GETMOTORMAXSPEED,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORSAFETYLIMIT	commands.h	/^  CMD_GETMOTORSAFETYLIMIT,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORSAFETYTIMEOUT	commands.h	/^  CMD_GETMOTORSAFETYTIMEOUT,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORSPEED	commands.h	/^  CMD_GETMOTORSPEED,$/;"	e	enum:protocol_commands_e
CMD_GETMOTORSTATE	commands.h	/^  CMD_GETMOTORSTATE,$/;"	e	enum:protocol_commands_e
CMD_GETVERSION	commands.h	/^  CMD_GETVERSION,$/;"	e	enum:protocol_commands_e
CMD_NUMCOMMANDS	commands.h	/^  CMD_NUMCOMMANDS$/;"	e	enum:protocol_commands_e
CMD_SETMOTORANGLE	commands.h	/^  CMD_SETMOTORANGLE,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORANGLEABS	commands.h	/^  CMD_SETMOTORANGLEABS,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORANGLEDIRECT	commands.h	/^  CMD_SETMOTORANGLEDIRECT,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORANGLEPID	commands.h	/^  CMD_SETMOTORANGLEPID,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORANGLES	commands.h	/^  CMD_SETMOTORANGLES,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORANGLESABS	commands.h	/^  CMD_SETMOTORANGLESABS,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORANGLESDIRECT	commands.h	/^  CMD_SETMOTORANGLESDIRECT,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORANGLESPID	commands.h	/^  CMD_SETMOTORANGLESPID,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORDIR	commands.h	/^  CMD_SETMOTORDIR,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORSAFETYLIMIT	commands.h	/^  CMD_SETMOTORSAFETYLIMIT,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORSAFETYTIMEOUT	commands.h	/^  CMD_SETMOTORSAFETYTIMEOUT,$/;"	e	enum:protocol_commands_e
CMD_SETMOTORSPEED	commands.h	/^  CMD_SETMOTORSPEED,$/;"	e	enum:protocol_commands_e
CMD_START	commands.h	26;"	d
CMD_STATUS	commands.h	/^  CMD_STATUS,$/;"	e	enum:protocol_commands_e
CMD_STOP	commands.h	/^  CMD_STOP,$/;"	e	enum:protocol_commands_e
CMobot	mobot.cpp	/^CMobot::CMobot()$/;"	f	class:CMobot
CMobot	mobot.h	/^class CMobot {$/;"	c
CMobot	mobot_new.cpp	/^CMobot::CMobot()$/;"	f	class:CMobot
CMobotGroup	mobot.cpp	/^CMobotGroup::CMobotGroup()$/;"	f	class:CMobotGroup
CMobotGroup	mobot.h	/^class CMobotGroup$/;"	c
CMobotGroup	mobot_new.cpp	/^CMobotGroup::CMobotGroup()$/;"	f	class:CMobotGroup
COND_BROADCAST	thread_macros.h	258;"	d
COND_BROADCAST	thread_macros.h	95;"	d
COND_DESTROY	thread_macros.h	237;"	d
COND_DESTROY	thread_macros.h	71;"	d
COND_INIT	thread_macros.h	233;"	d
COND_INIT	thread_macros.h	63;"	d
COND_NEW	thread_macros.h	228;"	d
COND_NEW	thread_macros.h	66;"	d
COND_RESET	thread_macros.h	249;"	d
COND_RESET	thread_macros.h	83;"	d
COND_SIGNAL	thread_macros.h	260;"	d
COND_SIGNAL	thread_macros.h	97;"	d
COND_SLEEP	thread_macros.h	244;"	d
COND_SLEEP	thread_macros.h	77;"	d
COND_SLEEP_ACTION	thread_macros.h	251;"	d
COND_SLEEP_ACTION	thread_macros.h	85;"	d
COND_T	thread_macros.h	226;"	d
COND_T	thread_macros.h	61;"	d
COND_WAIT	thread_macros.h	240;"	d
COND_WAIT	thread_macros.h	74;"	d
CRecordMobot	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^CRecordMobot::CRecordMobot(TCHAR *name)$/;"	f	class:CRecordMobot
CRecordMobot	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^class CRecordMobot :$/;"	c
CTeachingDialog	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^CTeachingDialog::CTeachingDialog(CWnd* pParent \/*=NULL*\/)$/;"	f	class:CTeachingDialog
CTeachingDialog	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^class CTeachingDialog : public CDialog$/;"	c
ChNXT	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^class ChNXT {$/;"	c
ChNXT	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^class ChNXT {$/;"	c
ChNXT	chnxt/chnxt.c	/^ChNXT::ChNXT() {$/;"	f	class:ChNXT
ChNXT	nxt.cpp	/^ChNXT::ChNXT() {$/;"	f	class:ChNXT
ChNXT	nxt.h	/^class ChNXT {$/;"	c
ChNXT_ChNXT_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH void ChNXT_ChNXT_chdl(void *varg) {$/;"	f
ChNXT_dChNXT_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH void ChNXT_dChNXT_chdl(void *varg) {$/;"	f
CiMobotController_WindowsApp	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_Windows.cpp	/^CiMobotController_WindowsApp::CiMobotController_WindowsApp()$/;"	f	class:CiMobotController_WindowsApp
CiMobotController_WindowsApp	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_Windows.h	/^class CiMobotController_WindowsApp : public CWinApp$/;"	c
CiMobotController_WindowsDlg	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CiMobotController_WindowsDlg
CiMobotController_WindowsDlg	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^class CiMobotController_WindowsDlg : public CDialog$/;"	c
ConfigFile	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^ConfigFile::ConfigFile()$/;"	f	class:ConfigFile
ConfigFile	demos/iMobotController_Windows/iMobotController_Windows/configFile.h	/^class ConfigFile$/;"	c
ConfigFileDialog	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.cpp	/^ConfigFileDialog::ConfigFileDialog(CWnd* pParent \/*=NULL*\/)$/;"	f	class:ConfigFileDialog
ConfigFileDialog	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.h	/^class ConfigFileDialog : public CDialog$/;"	c
ContextMenuArg	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlCtx.h	/^	void* ContextMenuArg;$/;"	m	class:CListCtrlCtx
ContextMenu_cb	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlCtx.h	/^	void (*ContextMenu_cb)(CPoint point, void *arg);$/;"	m	class:CListCtrlCtx
DEF_MOTOR_MAXSPEED	mobot_internal.h	110;"	d
DEF_MOTOR_MAXSPEED	nxt_internal.h	143;"	d
DEF_MOTOR_SPEED	mobot_internal.h	109;"	d
DEF_MOTOR_SPEED	nxt_internal.h	142;"	d
DEG2RAD	mobot_internal.h	23;"	d
DEG2RAD	nxt_internal.h	30;"	d
DLLIMPORT	mobot.h	5;"	d
DLLIMPORT	mobot_internal.h	121;"	d
DLLIMPORT	mobot_internal.h	123;"	d
DLLIMPORT	mobot_internal.h	127;"	d
DLLIMPORT	nxt_internal.h	154;"	d
DLLIMPORT	nxt_internal.h	156;"	d
DLLIMPORT	nxt_internal.h	160;"	d
DeleteRecordedMotion	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::DeleteRecordedMotion(int index)$/;"	f	class:CTeachingDialog
DoDataExchange	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::DoDataExchange(CDataExchange* pDX)$/;"	f	class:CTeachingDialog
DoDataExchange	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.cpp	/^void ConfigFileDialog::DoDataExchange(CDataExchange* pDX)$/;"	f	class:ConfigFileDialog
DoDataExchange	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CAboutDlg
DoDataExchange	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CiMobotController_WindowsDlg
EVENT_BUTTON	commands.h	24;"	d
Gait	demos/iMobotController_Windows/iMobotController_Windows/gait.cpp	/^Gait::Gait(const char* name) $/;"	f	class:Gait
Gait	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^class Gait {$/;"	c
IDB_BITMAP1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	13;"	d
IDB_BITMAP2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	14;"	d
IDB_BITMAP6	demos/iMobotController_Windows/iMobotController_Windows/resource.h	36;"	d
IDB_BITMAP7	demos/iMobotController_Windows/iMobotController_Windows/resource.h	26;"	d
IDB_BITMAP8	demos/iMobotController_Windows/iMobotController_Windows/resource.h	34;"	d
IDB_BITMAP9	demos/iMobotController_Windows/iMobotController_Windows/resource.h	39;"	d
IDB_BITMAP_CH	demos/iMobotController_Windows/iMobotController_Windows/resource.h	40;"	d
IDB_BITMAP_GENERAL	demos/iMobotController_Windows/iMobotController_Windows/resource.h	27;"	d
IDB_BITMAP_HUMANOID	demos/iMobotController_Windows/iMobotController_Windows/resource.h	33;"	d
IDB_BITMAP_MACHINE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	31;"	d
IDB_BITMAP_VEHICLE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	30;"	d
IDB_PNG4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	32;"	d
IDB_PNG_HUMANOID	demos/iMobotController_Windows/iMobotController_Windows/resource.h	29;"	d
IDB_PNG_MACHINE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	28;"	d
IDB_STATIC_MACHINE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	125;"	d
IDC_BUTTON1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	76;"	d
IDC_BUTTON2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	89;"	d
IDC_BUTTON3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	92;"	d
IDC_BUTTON4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	101;"	d
IDC_BUTTON5	demos/iMobotController_Windows/iMobotController_Windows/resource.h	127;"	d
IDC_BUTTON8	demos/iMobotController_Windows/iMobotController_Windows/resource.h	134;"	d
IDC_BUTTON_ADD	demos/iMobotController_Windows/iMobotController_Windows/resource.h	77;"	d
IDC_BUTTON_GOPOS	demos/iMobotController_Windows/iMobotController_Windows/resource.h	90;"	d
IDC_BUTTON_GOPOS2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	98;"	d
IDC_BUTTON_MOVE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	100;"	d
IDC_BUTTON_MOVEDOWN	demos/iMobotController_Windows/iMobotController_Windows/resource.h	83;"	d
IDC_BUTTON_MOVETOZERO	demos/iMobotController_Windows/iMobotController_Windows/resource.h	93;"	d
IDC_BUTTON_MOVEUP	demos/iMobotController_Windows/iMobotController_Windows/resource.h	82;"	d
IDC_BUTTON_Motor1Backward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	57;"	d
IDC_BUTTON_Motor1Forward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	49;"	d
IDC_BUTTON_Motor1Stop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	53;"	d
IDC_BUTTON_Motor2Backward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	58;"	d
IDC_BUTTON_Motor2Forward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	50;"	d
IDC_BUTTON_Motor2Stop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	54;"	d
IDC_BUTTON_Motor3Backward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	59;"	d
IDC_BUTTON_Motor3Forward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	51;"	d
IDC_BUTTON_Motor3Stop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	55;"	d
IDC_BUTTON_Motor4Backward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	60;"	d
IDC_BUTTON_Motor4Forward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	52;"	d
IDC_BUTTON_Motor4Stop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	56;"	d
IDC_BUTTON_REMOVE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	84;"	d
IDC_BUTTON_RESETTOZERO	demos/iMobotController_Windows/iMobotController_Windows/resource.h	103;"	d
IDC_BUTTON_SETSPD	demos/iMobotController_Windows/iMobotController_Windows/resource.h	99;"	d
IDC_BUTTON_SETZERO	demos/iMobotController_Windows/iMobotController_Windows/resource.h	102;"	d
IDC_BUTTON_armStop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	137;"	d
IDC_BUTTON_connect	demos/iMobotController_Windows/iMobotController_Windows/resource.h	71;"	d
IDC_BUTTON_moveArmDown	demos/iMobotController_Windows/iMobotController_Windows/resource.h	139;"	d
IDC_BUTTON_moveArmUp	demos/iMobotController_Windows/iMobotController_Windows/resource.h	136;"	d
IDC_BUTTON_moveStop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	138;"	d
IDC_BUTTON_portaStop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	129;"	d
IDC_BUTTON_rollBack	demos/iMobotController_Windows/iMobotController_Windows/resource.h	80;"	d
IDC_BUTTON_rollForward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	73;"	d
IDC_BUTTON_rollLeft	demos/iMobotController_Windows/iMobotController_Windows/resource.h	72;"	d
IDC_BUTTON_rollRight	demos/iMobotController_Windows/iMobotController_Windows/resource.h	75;"	d
IDC_BUTTON_rollStop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	78;"	d
IDC_BUTTON_rotateArmLeft	demos/iMobotController_Windows/iMobotController_Windows/resource.h	140;"	d
IDC_BUTTON_rotateArmRight	demos/iMobotController_Windows/iMobotController_Windows/resource.h	141;"	d
IDC_BUTTON_rotateLeft	demos/iMobotController_Windows/iMobotController_Windows/resource.h	128;"	d
IDC_BUTTON_rotateRight	demos/iMobotController_Windows/iMobotController_Windows/resource.h	131;"	d
IDC_BUTTON_rotateStop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	130;"	d
IDC_BUTTON_walkBackward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	135;"	d
IDC_BUTTON_walkForward	demos/iMobotController_Windows/iMobotController_Windows/resource.h	132;"	d
IDC_BUTTON_walkStop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	133;"	d
IDC_COMBO3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	121;"	d
IDC_COMBO_SENSORTYPE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	117;"	d
IDC_COMBO_Sensor1Type	demos/iMobotController_Windows/iMobotController_Windows/resource.h	118;"	d
IDC_COMBO_Sensor2Type	demos/iMobotController_Windows/iMobotController_Windows/resource.h	119;"	d
IDC_COMBO_Sensor3Type	demos/iMobotController_Windows/iMobotController_Windows/resource.h	120;"	d
IDC_COMBO_Sensor4Type	demos/iMobotController_Windows/iMobotController_Windows/resource.h	122;"	d
IDC_EDIT1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	74;"	d
IDC_EDIT2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	109;"	d
IDC_EDIT3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	111;"	d
IDC_EDIT4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	113;"	d
IDC_EDIT5	demos/iMobotController_Windows/iMobotController_Windows/resource.h	115;"	d
IDC_EDIT_SensorValue1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	110;"	d
IDC_EDIT_SensorValue2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	112;"	d
IDC_EDIT_SensorValue3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	114;"	d
IDC_EDIT_SensorValue4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	116;"	d
IDC_EDIT_position1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	61;"	d
IDC_EDIT_position2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	62;"	d
IDC_EDIT_position3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	63;"	d
IDC_EDIT_position4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	64;"	d
IDC_EDIT_setpos1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	85;"	d
IDC_EDIT_setpos2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	86;"	d
IDC_EDIT_setpos3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	87;"	d
IDC_EDIT_setpos4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	88;"	d
IDC_EDIT_setspd1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	94;"	d
IDC_EDIT_setspd2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	95;"	d
IDC_EDIT_setspd3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	96;"	d
IDC_EDIT_setspd4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	97;"	d
IDC_EDIT_speed1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	42;"	d
IDC_EDIT_speed2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	44;"	d
IDC_EDIT_speed3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	46;"	d
IDC_EDIT_speed4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	48;"	d
IDC_JOINTPICTURE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	91;"	d
IDC_LIST1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	79;"	d
IDC_LIST2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	81;"	d
IDC_LIST_gaits	demos/iMobotController_Windows/iMobotController_Windows/resource.h	65;"	d
IDC_RADIO_clawClose	demos/iMobotController_Windows/iMobotController_Windows/resource.h	143;"	d
IDC_RADIO_clawOpen	demos/iMobotController_Windows/iMobotController_Windows/resource.h	142;"	d
IDC_SLIDER_position1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	66;"	d
IDC_SLIDER_position2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	67;"	d
IDC_SLIDER_position3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	68;"	d
IDC_SLIDER_position4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	70;"	d
IDC_SLIDER_speed1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	41;"	d
IDC_SLIDER_speed2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	43;"	d
IDC_SLIDER_speed3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	47;"	d
IDC_SLIDER_speed4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	45;"	d
IDC_SLIDER_speed8	demos/iMobotController_Windows/iMobotController_Windows/resource.h	69;"	d
IDC_SPLIT4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	107;"	d
IDC_SPLIT_Sensor1Type	demos/iMobotController_Windows/iMobotController_Windows/resource.h	104;"	d
IDC_SPLIT_Sensor2Type	demos/iMobotController_Windows/iMobotController_Windows/resource.h	105;"	d
IDC_SPLIT_Sensor3Type	demos/iMobotController_Windows/iMobotController_Windows/resource.h	106;"	d
IDC_SPLIT_Sensor4Type	demos/iMobotController_Windows/iMobotController_Windows/resource.h	108;"	d
IDC_STATIC_GENERAL	demos/iMobotController_Windows/iMobotController_Windows/resource.h	123;"	d
IDC_STATIC_HUMANOID	demos/iMobotController_Windows/iMobotController_Windows/resource.h	126;"	d
IDC_STATIC_VEHICLE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	124;"	d
IDD	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	enum { IDD = IDD_DIALOG_TEACHING };$/;"	e	enum:CTeachingDialog::__anon3
IDD	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.h	/^	enum { IDD = IDD_DIALOG_CONFIG };$/;"	e	enum:ConfigFileDialog::__anon1
IDD	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	e	enum:CAboutDlg::__anon2	file:
IDD	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	enum { IDD = IDD_IMOBOTCONTROLLER_WINDOWS_DIALOG };$/;"	e	enum:CiMobotController_WindowsDlg::__anon4
IDD_ABOUTBOX	demos/iMobotController_Windows/iMobotController_Windows/resource.h	6;"	d
IDD_DIALOG1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	17;"	d
IDD_DIALOG_CONFIG	demos/iMobotController_Windows/iMobotController_Windows/resource.h	18;"	d
IDD_IMOBOTCONTROLLER_WINDOWS_DIALOG	demos/iMobotController_Windows/iMobotController_Windows/resource.h	8;"	d
IDI_ICON2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	20;"	d
IDI_ICON3	demos/iMobotController_Windows/iMobotController_Windows/resource.h	22;"	d
IDI_ICON4	demos/iMobotController_Windows/iMobotController_Windows/resource.h	35;"	d
IDI_ICON5	demos/iMobotController_Windows/iMobotController_Windows/resource.h	38;"	d
IDI_ICON_GREENDOT	demos/iMobotController_Windows/iMobotController_Windows/resource.h	21;"	d
IDI_ICON_REDDOT	demos/iMobotController_Windows/iMobotController_Windows/resource.h	23;"	d
IDI_ICON_ch	demos/iMobotController_Windows/iMobotController_Windows/resource.h	37;"	d
IDI_ICON_down	demos/iMobotController_Windows/iMobotController_Windows/resource.h	11;"	d
IDI_ICON_left	demos/iMobotController_Windows/iMobotController_Windows/resource.h	16;"	d
IDI_ICON_right	demos/iMobotController_Windows/iMobotController_Windows/resource.h	15;"	d
IDI_ICON_stop	demos/iMobotController_Windows/iMobotController_Windows/resource.h	12;"	d
IDI_ICON_up	demos/iMobotController_Windows/iMobotController_Windows/resource.h	10;"	d
IDM_ABOUTBOX	demos/iMobotController_Windows/iMobotController_Windows/resource.h	5;"	d
IDR_MAINFRAME	demos/iMobotController_Windows/iMobotController_Windows/resource.h	9;"	d
IDR_MENU1	demos/iMobotController_Windows/iMobotController_Windows/resource.h	19;"	d
IDR_MENU2	demos/iMobotController_Windows/iMobotController_Windows/resource.h	24;"	d
IDR_MENU_RECORDEDMOTIONPOPUP	demos/iMobotController_Windows/iMobotController_Windows/resource.h	25;"	d
IDS_ABOUTBOX	demos/iMobotController_Windows/iMobotController_Windows/resource.h	7;"	d
IDT_TIMER1	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	12;"	d
ID_CONNECT_DISCONNECTFROMROBOT	demos/iMobotController_Windows/iMobotController_Windows/resource.h	147;"	d
ID_FILE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	146;"	d
ID_FILE_EXIT	demos/iMobotController_Windows/iMobotController_Windows/resource.h	150;"	d
ID_HELP_ABOUTROBOTCONTROLLER	demos/iMobotController_Windows/iMobotController_Windows/resource.h	149;"	d
ID_HELP_DEMOS	demos/iMobotController_Windows/iMobotController_Windows/resource.h	151;"	d
ID_HELP_HELP	demos/iMobotController_Windows/iMobotController_Windows/resource.h	148;"	d
ID_RECORDED_GOTOPOSE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	158;"	d
ID_RECORDED_MOVEDOWN	demos/iMobotController_Windows/iMobotController_Windows/resource.h	157;"	d
ID_RECORDED_MOVEUP	demos/iMobotController_Windows/iMobotController_Windows/resource.h	156;"	d
ID_RENAME	demos/iMobotController_Windows/iMobotController_Windows/resource.h	153;"	d
ID_RENAME_REMOVE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	154;"	d
ID_RENAME_REMOVE32782	demos/iMobotController_Windows/iMobotController_Windows/resource.h	155;"	d
ID_ROBOT_CONFIGUREROBOTBLUETOOTH	demos/iMobotController_Windows/iMobotController_Windows/resource.h	144;"	d
ID_ROBOT_CONNECTTOAROBOT	demos/iMobotController_Windows/iMobotController_Windows/resource.h	145;"	d
ID_TEACHINGMODE_TEACHINGMODEDIALOG	demos/iMobotController_Windows/iMobotController_Windows/resource.h	152;"	d
INIT_MARG	mobot_new.cpp	2251;"	d	file:
InitIcons	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CiMobotController_WindowsDlg
InitInstance	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_Windows.cpp	/^BOOL CiMobotController_WindowsApp::InitInstance()$/;"	f	class:CiMobotController_WindowsApp
MAXDATASIZE	mobot_new.cpp	189;"	d	file:
MAXSPD	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	16;"	d	file:
MAXSPDR	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	17;"	d	file:
MAX_CONNECTED	demos/iMobotController_Windows/iMobotController_Windows/robotManager.h	13;"	d
MOTION_ALLOC_SIZE	demos/iMobotController_Windows/iMobotController_Windows/gait.h	5;"	d
MOTION_MOVE	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  MOTION_MOVE$/;"	e	enum:motion_type_e
MOTION_POS	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	MOTION_POS,$/;"	e	enum:motionType_e
MOTION_POSE	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  MOTION_POSE,$/;"	e	enum:motion_type_e
MOTION_SLEEP	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	MOTION_SLEEP,$/;"	e	enum:motionType_e
MSG_SENDEND	commands.h	13;"	d
MUTEX_DESTROY	thread_macros.h	208;"	d
MUTEX_DESTROY	thread_macros.h	44;"	d
MUTEX_INIT	thread_macros.h	205;"	d
MUTEX_INIT	thread_macros.h	41;"	d
MUTEX_LOCK	thread_macros.h	210;"	d
MUTEX_LOCK	thread_macros.h	47;"	d
MUTEX_NEW	thread_macros.h	216;"	d
MUTEX_NEW	thread_macros.h	52;"	d
MUTEX_T	thread_macros.h	203;"	d
MUTEX_T	thread_macros.h	39;"	d
MUTEX_UNLOCK	thread_macros.h	214;"	d
MUTEX_UNLOCK	thread_macros.h	50;"	d
M_PI	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	15;"	d
M_PI	mobot.h	48;"	d
Mobot_blinkLED	mobot.cpp	/^int Mobot_blinkLED(br_comms_t* comms, double delay, int numBlinks)$/;"	f
Mobot_blinkLED	mobot_new.cpp	/^int Mobot_blinkLED(mobot_t* comms, double delay, int numBlinks)$/;"	f
Mobot_connect	mobot.cpp	/^int Mobot_connect(br_comms_t* comms)$/;"	f
Mobot_connect	mobot_new.cpp	/^int Mobot_connect(mobot_t* comms)$/;"	f
Mobot_connectWithAddress	mobot.cpp	/^int Mobot_connectWithAddress(br_comms_t* comms, const char* address, int channel)$/;"	f
Mobot_connectWithAddress	mobot_new.cpp	/^int Mobot_connectWithAddress(mobot_t* comms, const char* address, int channel)$/;"	f
Mobot_connectWithTCP	mobot_new.cpp	/^int Mobot_connectWithTCP(mobot_t* comms)$/;"	f
Mobot_connectWithTTY	mobot.cpp	/^int Mobot_connectWithTTY(br_comms_t* comms, const char* ttyfilename)$/;"	f
Mobot_connectWithTTY	mobot_new.cpp	/^int Mobot_connectWithTTY(mobot_t* comms, const char* ttyfilename)$/;"	f
Mobot_connect_old	mobot.cpp	/^int Mobot_connect_old(br_comms_t* comms)$/;"	f
Mobot_disableButtonCallback	mobot.cpp	/^int Mobot_disableButtonCallback(br_comms_t* comms)$/;"	f
Mobot_disableButtonCallback	mobot_new.cpp	/^int Mobot_disableButtonCallback(mobot_t* comms)$/;"	f
Mobot_disconnect	mobot.cpp	/^int Mobot_disconnect(br_comms_t* comms)$/;"	f
Mobot_disconnect	mobot_new.cpp	/^int Mobot_disconnect(mobot_t* comms)$/;"	f
Mobot_driveJointToDirect	mobot_new.cpp	/^int Mobot_driveJointToDirect(mobot_t* comms, mobotJointId_t id, double angle)$/;"	f
Mobot_driveJointToDirectNB	mobot_new.cpp	/^int Mobot_driveJointToDirectNB(mobot_t* comms, mobotJointId_t id, double angle)$/;"	f
Mobot_driveToDirect	mobot_new.cpp	/^int Mobot_driveToDirect(mobot_t* comms,$/;"	f
Mobot_driveToDirectNB	mobot_new.cpp	/^int Mobot_driveToDirectNB(mobot_t* comms,$/;"	f
Mobot_enableButtonCallback	mobot.cpp	/^int Mobot_enableButtonCallback(br_comms_t* comms, void* robot, void (*buttonCallback)(void* robot, int button, int buttonDown))$/;"	f
Mobot_enableButtonCallback	mobot_new.cpp	/^int Mobot_enableButtonCallback(mobot_t* comms, void* data, void (*buttonCallback)(void* data, int button, int buttonDown))$/;"	f
Mobot_getButtonVoltage	mobot.cpp	/^int Mobot_getButtonVoltage(br_comms_t* comms, double *voltage)$/;"	f
Mobot_getButtonVoltage	mobot_new.cpp	/^int Mobot_getButtonVoltage(mobot_t* comms, double *voltage)$/;"	f
Mobot_getConfigFilePath	mobot_new.cpp	/^const char* Mobot_getConfigFilePath()$/;"	f
Mobot_getEncoderVoltage	mobot.cpp	/^int Mobot_getEncoderVoltage(br_comms_t* comms, int pinNumber, double *voltage)$/;"	f
Mobot_getEncoderVoltage	mobot_new.cpp	/^int Mobot_getEncoderVoltage(mobot_t* comms, int pinNumber, double *voltage)$/;"	f
Mobot_getJointAngle	mobot.cpp	/^int Mobot_getJointAngle(br_comms_t* comms, robotJointId_t id, double *angle)$/;"	f
Mobot_getJointAngle	mobot_new.cpp	/^int Mobot_getJointAngle(mobot_t* comms, mobotJointId_t id, double *angle)$/;"	f
Mobot_getJointAngleAbs	mobot.cpp	/^int Mobot_getJointAngleAbs(br_comms_t* comms, robotJointId_t id, double *angle)$/;"	f
Mobot_getJointAngleTime	mobot.cpp	/^int Mobot_getJointAngleTime(br_comms_t* comms, robotJointId_t id, double *time, double *angle)$/;"	f
Mobot_getJointAngles	mobot.cpp	/^int Mobot_getJointAngles(br_comms_t* comms, $/;"	f
Mobot_getJointAngles	mobot_new.cpp	/^int Mobot_getJointAngles(mobot_t* comms, $/;"	f
Mobot_getJointAnglesAbs	mobot.cpp	/^int Mobot_getJointAnglesAbs(br_comms_t* comms, $/;"	f
Mobot_getJointAnglesAbsTime	mobot.cpp	/^int Mobot_getJointAnglesAbsTime(br_comms_t* comms, $/;"	f
Mobot_getJointAnglesTime	mobot.cpp	/^int Mobot_getJointAnglesTime(br_comms_t* comms, $/;"	f
Mobot_getJointAnglesTime	mobot_new.cpp	/^int Mobot_getJointAnglesTime(mobot_t* comms, $/;"	f
Mobot_getJointDirection	mobot.cpp	/^int Mobot_getJointDirection(br_comms_t* comms, robotJointId_t id, robotJointState_t *dir)$/;"	f
Mobot_getJointDirection	mobot_new.cpp	/^int Mobot_getJointDirection(mobot_t* comms, mobotJointId_t id, mobotJointState_t *dir)$/;"	f
Mobot_getJointMaxSpeed	mobot.cpp	/^int Mobot_getJointMaxSpeed(br_comms_t* comms, robotJointId_t id, double *maxSpeed)$/;"	f
Mobot_getJointMaxSpeed	mobot_new.cpp	/^int Mobot_getJointMaxSpeed(mobot_t* comms, mobotJointId_t id, double *maxSpeed)$/;"	f
Mobot_getJointSafetyAngle	mobot.cpp	/^int Mobot_getJointSafetyAngle(br_comms_t* comms, double *angle) $/;"	f
Mobot_getJointSafetyAngle	mobot_new.cpp	/^int Mobot_getJointSafetyAngle(mobot_t* comms, double *angle) $/;"	f
Mobot_getJointSafetyAngleTimeout	mobot.cpp	/^int Mobot_getJointSafetyAngleTimeout(br_comms_t* comms, double *seconds) $/;"	f
Mobot_getJointSafetyAngleTimeout	mobot_new.cpp	/^int Mobot_getJointSafetyAngleTimeout(mobot_t* comms, double *seconds) $/;"	f
Mobot_getJointSpeed	mobot.cpp	/^int Mobot_getJointSpeed(br_comms_t* comms, robotJointId_t id, double *speed)$/;"	f
Mobot_getJointSpeed	mobot_new.cpp	/^int Mobot_getJointSpeed(mobot_t* comms, mobotJointId_t id, double *speed)$/;"	f
Mobot_getJointSpeedRatio	mobot.cpp	/^int Mobot_getJointSpeedRatio(br_comms_t* comms, robotJointId_t id, double *ratio)$/;"	f
Mobot_getJointSpeedRatio	mobot_new.cpp	/^int Mobot_getJointSpeedRatio(mobot_t* comms, mobotJointId_t id, double *ratio)$/;"	f
Mobot_getJointSpeedRatios	mobot.cpp	/^int Mobot_getJointSpeedRatios(br_comms_t* comms, double *ratio1, double *ratio2, double *ratio3, double *ratio4)$/;"	f
Mobot_getJointSpeedRatios	mobot_new.cpp	/^int Mobot_getJointSpeedRatios(mobot_t* comms, double *ratio1, double *ratio2, double *ratio3, double *ratio4)$/;"	f
Mobot_getJointSpeeds	mobot.cpp	/^int Mobot_getJointSpeeds(br_comms_t* comms, double *speed1, double *speed2, double *speed3, double *speed4)$/;"	f
Mobot_getJointSpeeds	mobot_new.cpp	/^int Mobot_getJointSpeeds(mobot_t* comms, double *speed1, double *speed2, double *speed3, double *speed4)$/;"	f
Mobot_getJointState	mobot.cpp	/^int Mobot_getJointState(br_comms_t* comms, robotJointId_t id, robotJointState_t *state)$/;"	f
Mobot_getJointState	mobot_new.cpp	/^int Mobot_getJointState(mobot_t* comms, mobotJointId_t id, mobotJointState_t *state)$/;"	f
Mobot_getStatus	mobot.cpp	/^int Mobot_getStatus(br_comms_t* comms)$/;"	f
Mobot_getStatus	mobot_new.cpp	/^int Mobot_getStatus(mobot_t* comms)$/;"	f
Mobot_getVersion	mobot.cpp	/^int Mobot_getVersion(br_comms_t* comms)$/;"	f
Mobot_getVersion	mobot_new.cpp	/^int Mobot_getVersion(mobot_t* comms)$/;"	f
Mobot_init	mobot.cpp	/^int Mobot_init(br_comms_t* comms)$/;"	f
Mobot_init	mobot_new.cpp	/^int Mobot_init(mobot_t* comms)$/;"	f
Mobot_isConnected	mobot.cpp	/^int Mobot_isConnected(br_comms_t* comms)$/;"	f
Mobot_isConnected	mobot_new.cpp	/^int Mobot_isConnected(mobot_t* comms)$/;"	f
Mobot_isMoving	mobot.cpp	/^int Mobot_isMoving(br_comms_t* comms)$/;"	f
Mobot_isMoving	mobot_new.cpp	/^int Mobot_isMoving(mobot_t* comms)$/;"	f
Mobot_motionArch	mobot.cpp	/^int Mobot_motionArch(br_comms_t* comms, double angle)$/;"	f
Mobot_motionArch	mobot_new.cpp	/^int Mobot_motionArch(mobot_t* comms, double angle)$/;"	f
Mobot_motionArchNB	mobot.cpp	/^int Mobot_motionArchNB(br_comms_t* comms, double angle)$/;"	f
Mobot_motionArchNB	mobot_new.cpp	/^int Mobot_motionArchNB(mobot_t* comms, double angle)$/;"	f
Mobot_motionInchwormLeft	mobot.cpp	/^int Mobot_motionInchwormLeft(br_comms_t* comms, int num)$/;"	f
Mobot_motionInchwormLeft	mobot_new.cpp	/^int Mobot_motionInchwormLeft(mobot_t* comms, int num)$/;"	f
Mobot_motionInchwormLeftNB	mobot.cpp	/^int Mobot_motionInchwormLeftNB(br_comms_t* comms, int num)$/;"	f
Mobot_motionInchwormLeftNB	mobot_new.cpp	/^int Mobot_motionInchwormLeftNB(mobot_t* comms, int num)$/;"	f
Mobot_motionInchwormRight	mobot.cpp	/^int Mobot_motionInchwormRight(br_comms_t* comms, int num)$/;"	f
Mobot_motionInchwormRight	mobot_new.cpp	/^int Mobot_motionInchwormRight(mobot_t* comms, int num)$/;"	f
Mobot_motionInchwormRightNB	mobot.cpp	/^int Mobot_motionInchwormRightNB(br_comms_t* comms, int num)$/;"	f
Mobot_motionInchwormRightNB	mobot_new.cpp	/^int Mobot_motionInchwormRightNB(mobot_t* comms, int num)$/;"	f
Mobot_motionRollBackward	mobot.cpp	/^int Mobot_motionRollBackward(br_comms_t* comms, double angle)$/;"	f
Mobot_motionRollBackward	mobot_new.cpp	/^int Mobot_motionRollBackward(mobot_t* comms, double angle)$/;"	f
Mobot_motionRollBackwardNB	mobot.cpp	/^int Mobot_motionRollBackwardNB(br_comms_t* comms, double angle)$/;"	f
Mobot_motionRollBackwardNB	mobot_new.cpp	/^int Mobot_motionRollBackwardNB(mobot_t* comms, double angle)$/;"	f
Mobot_motionRollForward	mobot.cpp	/^int Mobot_motionRollForward(br_comms_t* comms, double angle)$/;"	f
Mobot_motionRollForward	mobot_new.cpp	/^int Mobot_motionRollForward(mobot_t* comms, double angle)$/;"	f
Mobot_motionRollForwardNB	mobot.cpp	/^int Mobot_motionRollForwardNB(br_comms_t* comms, double angle)$/;"	f
Mobot_motionRollForwardNB	mobot_new.cpp	/^int Mobot_motionRollForwardNB(mobot_t* comms, double angle)$/;"	f
Mobot_motionSkinny	mobot.cpp	/^int Mobot_motionSkinny(br_comms_t* comms, double angle)$/;"	f
Mobot_motionSkinny	mobot_new.cpp	/^int Mobot_motionSkinny(mobot_t* comms, double angle)$/;"	f
Mobot_motionSkinnyNB	mobot.cpp	/^int Mobot_motionSkinnyNB(br_comms_t* comms, double angle)$/;"	f
Mobot_motionSkinnyNB	mobot_new.cpp	/^int Mobot_motionSkinnyNB(mobot_t* comms, double angle)$/;"	f
Mobot_motionStand	mobot.cpp	/^int Mobot_motionStand(br_comms_t* comms)$/;"	f
Mobot_motionStand	mobot_new.cpp	/^int Mobot_motionStand(mobot_t* comms)$/;"	f
Mobot_motionStandNB	mobot.cpp	/^int Mobot_motionStandNB(br_comms_t* comms)$/;"	f
Mobot_motionStandNB	mobot_new.cpp	/^int Mobot_motionStandNB(mobot_t* comms)$/;"	f
Mobot_motionTumbleLeft	mobot.cpp	/^int Mobot_motionTumbleLeft(br_comms_t* comms, int num)$/;"	f
Mobot_motionTumbleLeft	mobot_new.cpp	/^int Mobot_motionTumbleLeft(mobot_t* comms, int num)$/;"	f
Mobot_motionTumbleLeftNB	mobot.cpp	/^int Mobot_motionTumbleLeftNB(br_comms_t* comms, int num)$/;"	f
Mobot_motionTumbleLeftNB	mobot_new.cpp	/^int Mobot_motionTumbleLeftNB(mobot_t* comms, int num)$/;"	f
Mobot_motionTumbleRight	mobot.cpp	/^int Mobot_motionTumbleRight(br_comms_t* comms, int num)$/;"	f
Mobot_motionTumbleRight	mobot_new.cpp	/^int Mobot_motionTumbleRight(mobot_t* comms, int num)$/;"	f
Mobot_motionTumbleRightNB	mobot.cpp	/^int Mobot_motionTumbleRightNB(br_comms_t* comms, int num)$/;"	f
Mobot_motionTumbleRightNB	mobot_new.cpp	/^int Mobot_motionTumbleRightNB(mobot_t* comms, int num)$/;"	f
Mobot_motionTurnLeft	mobot.cpp	/^int Mobot_motionTurnLeft(br_comms_t* comms, double angle)$/;"	f
Mobot_motionTurnLeft	mobot_new.cpp	/^int Mobot_motionTurnLeft(mobot_t* comms, double angle)$/;"	f
Mobot_motionTurnLeftNB	mobot.cpp	/^int Mobot_motionTurnLeftNB(br_comms_t* comms, double angle)$/;"	f
Mobot_motionTurnLeftNB	mobot_new.cpp	/^int Mobot_motionTurnLeftNB(mobot_t* comms, double angle)$/;"	f
Mobot_motionTurnRight	mobot.cpp	/^int Mobot_motionTurnRight(br_comms_t* comms, double angle)$/;"	f
Mobot_motionTurnRight	mobot_new.cpp	/^int Mobot_motionTurnRight(mobot_t* comms, double angle)$/;"	f
Mobot_motionTurnRightNB	mobot.cpp	/^int Mobot_motionTurnRightNB(br_comms_t* comms, double angle)$/;"	f
Mobot_motionTurnRightNB	mobot_new.cpp	/^int Mobot_motionTurnRightNB(mobot_t* comms, double angle)$/;"	f
Mobot_motionUnstand	mobot.cpp	/^int Mobot_motionUnstand(br_comms_t* comms)$/;"	f
Mobot_motionUnstand	mobot_new.cpp	/^int Mobot_motionUnstand(mobot_t* comms)$/;"	f
Mobot_motionUnstandNB	mobot.cpp	/^int Mobot_motionUnstandNB(br_comms_t* comms)$/;"	f
Mobot_motionUnstandNB	mobot_new.cpp	/^int Mobot_motionUnstandNB(mobot_t* comms)$/;"	f
Mobot_motionWait	mobot.cpp	/^int Mobot_motionWait(br_comms_t* comms)$/;"	f
Mobot_motionWait	mobot_new.cpp	/^int Mobot_motionWait(mobot_t* comms)$/;"	f
Mobot_move	mobot.cpp	/^int Mobot_move(br_comms_t* comms,$/;"	f
Mobot_move	mobot_new.cpp	/^int Mobot_move(mobot_t* comms,$/;"	f
Mobot_moveContinuousNB	mobot.cpp	/^int Mobot_moveContinuousNB(br_comms_t* comms,$/;"	f
Mobot_moveContinuousNB	mobot_new.cpp	/^int Mobot_moveContinuousNB(mobot_t* comms,$/;"	f
Mobot_moveContinuousTime	mobot.cpp	/^int Mobot_moveContinuousTime(br_comms_t* comms,$/;"	f
Mobot_moveContinuousTime	mobot_new.cpp	/^int Mobot_moveContinuousTime(mobot_t* comms,$/;"	f
Mobot_moveJoint	mobot.cpp	/^int Mobot_moveJoint(br_comms_t* comms, robotJointId_t id, double angle)$/;"	f
Mobot_moveJoint	mobot_new.cpp	/^int Mobot_moveJoint(mobot_t* comms, mobotJointId_t id, double angle)$/;"	f
Mobot_moveJointContinuousNB	mobot.cpp	/^int Mobot_moveJointContinuousNB(br_comms_t* comms, robotJointId_t id, robotJointState_t dir)$/;"	f
Mobot_moveJointContinuousNB	mobot_new.cpp	/^int Mobot_moveJointContinuousNB(mobot_t* comms, mobotJointId_t id, mobotJointState_t dir)$/;"	f
Mobot_moveJointContinuousTime	mobot.cpp	/^int Mobot_moveJointContinuousTime(br_comms_t* comms, robotJointId_t id, robotJointState_t dir, double seconds)$/;"	f
Mobot_moveJointContinuousTime	mobot_new.cpp	/^int Mobot_moveJointContinuousTime(mobot_t* comms, mobotJointId_t id, mobotJointState_t dir, double seconds)$/;"	f
Mobot_moveJointNB	mobot.cpp	/^int Mobot_moveJointNB(br_comms_t* comms, robotJointId_t id, double angle)$/;"	f
Mobot_moveJointNB	mobot_new.cpp	/^int Mobot_moveJointNB(mobot_t* comms, mobotJointId_t id, double angle)$/;"	f
Mobot_moveJointTo	mobot.cpp	/^int Mobot_moveJointTo(br_comms_t* comms, robotJointId_t id, double angle)$/;"	f
Mobot_moveJointTo	mobot_new.cpp	/^int Mobot_moveJointTo(mobot_t* comms, mobotJointId_t id, double angle)$/;"	f
Mobot_moveJointToAbs	mobot.cpp	/^int Mobot_moveJointToAbs(br_comms_t* comms, robotJointId_t id, double angle)$/;"	f
Mobot_moveJointToAbsNB	mobot.cpp	/^int Mobot_moveJointToAbsNB(br_comms_t* comms, robotJointId_t id, double angle)$/;"	f
Mobot_moveJointToDirect	mobot.cpp	/^int Mobot_moveJointToDirect(br_comms_t* comms, robotJointId_t id, double angle)$/;"	f
Mobot_moveJointToDirect	mobot_new.cpp	/^int Mobot_moveJointToDirect(mobot_t* comms, mobotJointId_t id, double angle)$/;"	f
Mobot_moveJointToDirectNB	mobot.cpp	/^int Mobot_moveJointToDirectNB(br_comms_t* comms, robotJointId_t id, double angle)$/;"	f
Mobot_moveJointToDirectNB	mobot_new.cpp	/^int Mobot_moveJointToDirectNB(mobot_t* comms, mobotJointId_t id, double angle)$/;"	f
Mobot_moveJointToNB	mobot.cpp	/^int Mobot_moveJointToNB(br_comms_t* comms, robotJointId_t id, double angle)$/;"	f
Mobot_moveJointToNB	mobot_new.cpp	/^int Mobot_moveJointToNB(mobot_t* comms, mobotJointId_t id, double angle)$/;"	f
Mobot_moveJointToPIDNB	mobot.cpp	/^int Mobot_moveJointToPIDNB(br_comms_t* comms, robotJointId_t id, double angle)$/;"	f
Mobot_moveJointWait	mobot.cpp	/^int Mobot_moveJointWait(br_comms_t* comms, robotJointId_t id)$/;"	f
Mobot_moveJointWait	mobot_new.cpp	/^int Mobot_moveJointWait(mobot_t* comms, mobotJointId_t id)$/;"	f
Mobot_moveNB	mobot.cpp	/^int Mobot_moveNB(br_comms_t* comms,$/;"	f
Mobot_moveNB	mobot_new.cpp	/^int Mobot_moveNB(mobot_t* comms,$/;"	f
Mobot_moveTo	mobot.cpp	/^int Mobot_moveTo(br_comms_t* comms,$/;"	f
Mobot_moveTo	mobot_new.cpp	/^int Mobot_moveTo(mobot_t* comms,$/;"	f
Mobot_moveToAbs	mobot.cpp	/^int Mobot_moveToAbs(br_comms_t* comms,$/;"	f
Mobot_moveToAbsNB	mobot.cpp	/^int Mobot_moveToAbsNB(br_comms_t* comms,$/;"	f
Mobot_moveToDirect	mobot.cpp	/^int Mobot_moveToDirect(br_comms_t* comms,$/;"	f
Mobot_moveToDirect	mobot_new.cpp	/^int Mobot_moveToDirect(mobot_t* comms,$/;"	f
Mobot_moveToDirectNB	mobot.cpp	/^int Mobot_moveToDirectNB(br_comms_t* comms,$/;"	f
Mobot_moveToDirectNB	mobot_new.cpp	/^int Mobot_moveToDirectNB(mobot_t* comms,$/;"	f
Mobot_moveToNB	mobot.cpp	/^int Mobot_moveToNB(br_comms_t* comms,$/;"	f
Mobot_moveToNB	mobot_new.cpp	/^int Mobot_moveToNB(mobot_t* comms,$/;"	f
Mobot_moveToZero	mobot.cpp	/^int Mobot_moveToZero(br_comms_t* comms)$/;"	f
Mobot_moveToZero	mobot_new.cpp	/^int Mobot_moveToZero(mobot_t* comms)$/;"	f
Mobot_moveToZeroNB	mobot.cpp	/^int Mobot_moveToZeroNB(br_comms_t* comms)$/;"	f
Mobot_moveToZeroNB	mobot_new.cpp	/^int Mobot_moveToZeroNB(mobot_t* comms)$/;"	f
Mobot_moveWait	mobot.cpp	/^int Mobot_moveWait(br_comms_t* comms)$/;"	f
Mobot_moveWait	mobot_new.cpp	/^int Mobot_moveWait(mobot_t* comms)$/;"	f
Mobot_recordAngle	mobot.cpp	/^int Mobot_recordAngle(br_comms_t* comms, robotJointId_t id, double* time, double* angle, int num, double timeInterval)$/;"	f
Mobot_recordAngle	mobot_new.cpp	/^int Mobot_recordAngle(mobot_t* comms, mobotJointId_t id, double* time, double* angle, int num, double timeInterval)$/;"	f
Mobot_recordAngleBegin	mobot_new.cpp	/^int Mobot_recordAngleBegin(mobot_t* comms,$/;"	f
Mobot_recordAngleBeginThread	mobot_new.cpp	/^void* Mobot_recordAngleBeginThread(void* arg)$/;"	f
Mobot_recordAngleEnd	mobot_new.cpp	/^int Mobot_recordAngleEnd(mobot_t* comms, mobotJointId_t id, int *num)$/;"	f
Mobot_recordAngleThread	mobot.cpp	/^void* Mobot_recordAngleThread(void* arg)$/;"	f
Mobot_recordAngleThread	mobot_new.cpp	/^void* Mobot_recordAngleThread(void* arg)$/;"	f
Mobot_recordAngles	mobot.cpp	/^int Mobot_recordAngles(br_comms_t* comms, $/;"	f
Mobot_recordAngles	mobot_new.cpp	/^int Mobot_recordAngles(mobot_t* comms, $/;"	f
Mobot_recordAnglesBegin	mobot_new.cpp	/^int Mobot_recordAnglesBegin(mobot_t* comms,$/;"	f
Mobot_recordAnglesBeginThread	mobot_new.cpp	/^void* Mobot_recordAnglesBeginThread(void* arg)$/;"	f
Mobot_recordAnglesEnd	mobot_new.cpp	/^int Mobot_recordAnglesEnd(mobot_t* comms, int* num)$/;"	f
Mobot_recordWait	mobot.cpp	/^int Mobot_recordWait(br_comms_t* comms)$/;"	f
Mobot_recordWait	mobot_new.cpp	/^int Mobot_recordWait(mobot_t* comms)$/;"	f
Mobot_reset	mobot_new.cpp	/^int Mobot_reset(mobot_t* comms)$/;"	f
Mobot_resetToZero	mobot_new.cpp	/^int Mobot_resetToZero(mobot_t* comms) {$/;"	f
Mobot_resetToZeroNB	mobot_new.cpp	/^int Mobot_resetToZeroNB(mobot_t* comms) {$/;"	f
Mobot_setJointDirection	mobot.cpp	/^int Mobot_setJointDirection(br_comms_t* comms, robotJointId_t id, robotJointState_t dir)$/;"	f
Mobot_setJointDirection	mobot_new.cpp	/^int Mobot_setJointDirection(mobot_t* comms, mobotJointId_t id, mobotJointState_t dir)$/;"	f
Mobot_setJointSafetyAngle	mobot.cpp	/^int Mobot_setJointSafetyAngle(br_comms_t* comms, double angle)$/;"	f
Mobot_setJointSafetyAngle	mobot_new.cpp	/^int Mobot_setJointSafetyAngle(mobot_t* comms, double angle)$/;"	f
Mobot_setJointSafetyAngleTimeout	mobot.cpp	/^int Mobot_setJointSafetyAngleTimeout(br_comms_t* comms, double seconds)$/;"	f
Mobot_setJointSafetyAngleTimeout	mobot_new.cpp	/^int Mobot_setJointSafetyAngleTimeout(mobot_t* comms, double seconds)$/;"	f
Mobot_setJointSpeed	mobot.cpp	/^int Mobot_setJointSpeed(br_comms_t* comms, robotJointId_t id, double speed)$/;"	f
Mobot_setJointSpeed	mobot_new.cpp	/^int Mobot_setJointSpeed(mobot_t* comms, mobotJointId_t id, double speed)$/;"	f
Mobot_setJointSpeedRatio	mobot.cpp	/^int Mobot_setJointSpeedRatio(br_comms_t* comms, robotJointId_t id, double ratio)$/;"	f
Mobot_setJointSpeedRatio	mobot_new.cpp	/^int Mobot_setJointSpeedRatio(mobot_t* comms, mobotJointId_t id, double ratio)$/;"	f
Mobot_setJointSpeedRatios	mobot.cpp	/^int Mobot_setJointSpeedRatios(br_comms_t* comms, double ratio1, double ratio2, double ratio3, double ratio4)$/;"	f
Mobot_setJointSpeedRatios	mobot_new.cpp	/^int Mobot_setJointSpeedRatios(mobot_t* comms, double ratio1, double ratio2, double ratio3, double ratio4)$/;"	f
Mobot_setJointSpeeds	mobot.cpp	/^int Mobot_setJointSpeeds(br_comms_t* comms, double speed1, double speed2, double speed3, double speed4)$/;"	f
Mobot_setJointSpeeds	mobot_new.cpp	/^int Mobot_setJointSpeeds(mobot_t* comms, double speed1, double speed2, double speed3, double speed4)$/;"	f
Mobot_setMotorPower	mobot.cpp	/^int Mobot_setMotorPower(br_comms_t* comms, robotJointId_t id, int power)$/;"	f
Mobot_setMotorPower	mobot_new.cpp	/^int Mobot_setMotorPower(mobot_t* comms, mobotJointId_t id, int power)$/;"	f
Mobot_setTwoWheelRobotSpeed	mobot.cpp	/^int Mobot_setTwoWheelRobotSpeed(br_comms_t* comms, double speed, double radius)$/;"	f
Mobot_setTwoWheelRobotSpeed	mobot_new.cpp	/^int Mobot_setTwoWheelRobotSpeed(mobot_t* comms, double speed, double radius)$/;"	f
Mobot_stop	mobot.cpp	/^int Mobot_stop(br_comms_t* comms)$/;"	f
Mobot_stop	mobot_new.cpp	/^int Mobot_stop(mobot_t* comms)$/;"	f
Mobot_stopAllJoints	mobot_new.cpp	/^int Mobot_stopAllJoints(mobot_t* comms)$/;"	f
Mobot_stopOneJoint	mobot_new.cpp	/^int Mobot_stopOneJoint(mobot_t* comms, mobotJointId_t id)$/;"	f
Mobot_stopThreeJoints	mobot_new.cpp	/^int Mobot_stopThreeJoints(mobot_t* comms, mobotJointId_t id1, mobotJointId_t id2, mobotJointId_t id3)$/;"	f
Mobot_stopTwoJoints	mobot_new.cpp	/^int Mobot_stopTwoJoints(mobot_t* comms, mobotJointId_t id1, mobotJointId_t id2)$/;"	f
Motion	demos/iMobotController_Windows/iMobotController_Windows/gait.cpp	/^Motion::Motion(enum motion_type_e motion_type, double angles[4])$/;"	f	class:Motion
Motion	demos/iMobotController_Windows/iMobotController_Windows/gait.cpp	/^Motion::Motion(enum motion_type_e motion_type, double angles[4], unsigned char motorMask)$/;"	f	class:Motion
Motion	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^class Motion {$/;"	c
NXT_BACKWARD	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_BACKWARD = -1,$/;"	e	enum:nxt_joint_state_e
NXT_BACKWARD	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_BACKWARD = -1,$/;"	e	enum:nxt_joint_state_e
NXT_BACKWARD	nxt.h	/^    NXT_BACKWARD = -1,$/;"	e	enum:nxt_joint_state_e
NXT_FORWARD	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_FORWARD = 1,$/;"	e	enum:nxt_joint_state_e
NXT_FORWARD	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_FORWARD = 1,$/;"	e	enum:nxt_joint_state_e
NXT_FORWARD	nxt.h	/^    NXT_FORWARD = 1,$/;"	e	enum:nxt_joint_state_e
NXT_JOINT1	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_JOINT1 = 0, \/\/ PORT_A$/;"	e	enum:nxt_joints_e
NXT_JOINT1	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_JOINT1 = 0, \/\/ PORT_A$/;"	e	enum:nxt_joints_e
NXT_JOINT1	nxt.h	/^    NXT_JOINT1 = 0, \/\/ PORT_A$/;"	e	enum:nxt_joints_e
NXT_JOINT2	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_JOINT2 = 1, \/\/ PORT_B$/;"	e	enum:nxt_joints_e
NXT_JOINT2	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_JOINT2 = 1, \/\/ PORT_B$/;"	e	enum:nxt_joints_e
NXT_JOINT2	nxt.h	/^    NXT_JOINT2 = 1, \/\/ PORT_B$/;"	e	enum:nxt_joints_e
NXT_JOINT3	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_JOINT3 = 2  \/\/ PORT_C$/;"	e	enum:nxt_joints_e
NXT_JOINT3	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_JOINT3 = 2  \/\/ PORT_C$/;"	e	enum:nxt_joints_e
NXT_JOINT3	nxt.h	/^    NXT_JOINT3 = 2  \/\/ PORT_C$/;"	e	enum:nxt_joints_e
NXT_JOINTS_E	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	38;"	d
NXT_JOINTS_E	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	34;"	d
NXT_JOINTS_E	nxt.h	34;"	d
NXT_JOINT_STATE_E	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	47;"	d
NXT_JOINT_STATE_E	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	43;"	d
NXT_JOINT_STATE_E	nxt.h	43;"	d
NXT_SENSORMODE_BOOLEANMODE	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORMODE_BOOLEANMODE	     = 0x20,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_BOOLEANMODE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORMODE_BOOLEANMODE	     = 0x20,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_BOOLEANMODE	nxt.h	/^    NXT_SENSORMODE_BOOLEANMODE	     = 0x20,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_CELSIUSMODE	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORMODE_CELSIUSMODE       = 0xA0,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_CELSIUSMODE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORMODE_CELSIUSMODE       = 0xA0,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_CELSIUSMODE	nxt.h	/^    NXT_SENSORMODE_CELSIUSMODE       = 0xA0,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_FAHRENHEITMODE	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORMODE_FAHRENHEITMODE    = 0xC0$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_FAHRENHEITMODE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORMODE_FAHRENHEITMODE    = 0xC0$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_FAHRENHEITMODE	nxt.h	/^    NXT_SENSORMODE_FAHRENHEITMODE    = 0xC0$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_PCTFULLSCALEMODE	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORMODE_PCTFULLSCALEMODE  = 0x80, \/* Percentage Mode *\/$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_PCTFULLSCALEMODE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORMODE_PCTFULLSCALEMODE  = 0x80, \/* Percentage Mode *\/$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_PCTFULLSCALEMODE	nxt.h	/^    NXT_SENSORMODE_PCTFULLSCALEMODE  = 0x80, \/* Percentage Mode *\/$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_PERIODCOUNTERMODE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORMODE_PERIODCOUNTERMODE = 0x60,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_PERIODCOUNTERMODE	nxt.h	/^    NXT_SENSORMODE_PERIODCOUNTERMODE = 0x60,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_RAWMODE	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORMODE_RAWMODE           = 0x00,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_RAWMODE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORMODE_RAWMODE           = 0x00,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_RAWMODE	nxt.h	/^    NXT_SENSORMODE_RAWMODE           = 0x00,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_TRANSITIONCNTMODE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORMODE_TRANSITIONCNTMODE = 0x40,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORMODE_TRANSITIONCNTMODE	nxt.h	/^    NXT_SENSORMODE_TRANSITIONCNTMODE = 0x40,$/;"	e	enum:nxt_sensor_mode_e
NXT_SENSORPORT1	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORPORT1 = 0,$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT1	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORPORT1 = 0,$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT1	nxt.h	/^    NXT_SENSORPORT1 = 0,$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT2	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORPORT2 = 1,$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT2	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORPORT2 = 1,$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT2	nxt.h	/^    NXT_SENSORPORT2 = 1,$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT3	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORPORT3 = 2,$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT3	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORPORT3 = 2,$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT3	nxt.h	/^    NXT_SENSORPORT3 = 2,$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT4	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORPORT4 = 3$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT4	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORPORT4 = 3$/;"	e	enum:nxt_sensors_e
NXT_SENSORPORT4	nxt.h	/^    NXT_SENSORPORT4 = 3$/;"	e	enum:nxt_sensors_e
NXT_SENSORS_E	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	57;"	d
NXT_SENSORS_E	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	53;"	d
NXT_SENSORS_E	nxt.h	53;"	d
NXT_SENSORTYPE_COLORBLUE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_COLORBLUE       = 0x10,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORBLUE	nxt.h	/^    NXT_SENSORTYPE_COLORBLUE       = 0x10,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORFULL	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_COLORFULL       = 0x0D  \/\/ Color sensor in full color mode (color sensor mode)$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORFULL	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_COLORFULL       = 0x0D, \/* Color sensor mode *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORFULL	nxt.h	/^    NXT_SENSORTYPE_COLORFULL       = 0x0D, \/* Color sensor mode *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORGREEN	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_COLORGREEN      = 0x0F,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORGREEN	nxt.h	/^    NXT_SENSORTYPE_COLORGREEN      = 0x0F,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORNONE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_COLORNONE       = 0x11$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORNONE	nxt.h	/^    NXT_SENSORTYPE_COLORNONE       = 0x11$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORRED	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_COLORRED        = 0x0E,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_COLORRED	nxt.h	/^    NXT_SENSORTYPE_COLORRED        = 0x0E,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_HIGHSPEED	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_HIGHSPEED       = 0x0C, \/* No useage now *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_HIGHSPEED	nxt.h	/^    NXT_SENSORTYPE_HIGHSPEED       = 0x0C, \/* No useage now *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LIGHT_ACTIVE	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_LIGHT_ACTIVE    = 0x05,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LIGHT_ACTIVE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_LIGHT_ACTIVE    = 0x05, $/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LIGHT_ACTIVE	nxt.h	/^    NXT_SENSORTYPE_LIGHT_ACTIVE    = 0x05, $/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LIGHT_INACTIVE	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_LIGHT_INACTIVE  = 0x06,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LIGHT_INACTIVE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_LIGHT_INACTIVE  = 0x06,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LIGHT_INACTIVE	nxt.h	/^    NXT_SENSORTYPE_LIGHT_INACTIVE  = 0x06,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LOWSPEED	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_LOWSPEED        = 0x0A,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LOWSPEED	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_LOWSPEED        = 0x0A,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LOWSPEED	nxt.h	/^    NXT_SENSORTYPE_LOWSPEED        = 0x0A,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LOWSPEED_9V	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_LOWSPEED_9V     = 0x0B, $/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LOWSPEED_9V	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_LOWSPEED_9V     = 0x0B, $/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_LOWSPEED_9V	nxt.h	/^    NXT_SENSORTYPE_LOWSPEED_9V     = 0x0B, $/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_NOSENSOR	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_NOSENSOR        = 0x00,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_NOSENSOR	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_NOSENSOR        = 0x00,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_NOSENSOR	nxt.h	/^    NXT_SENSORTYPE_NOSENSOR        = 0x00,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_SOUND_DB	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_SOUND_DB        = 0x07, \/\/ Sound sensor (unadjusted)$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_SOUND_DB	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_SOUND_DB        = 0x07, \/* Sound sensor (unadjusted) *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_SOUND_DB	nxt.h	/^    NXT_SENSORTYPE_SOUND_DB        = 0x07, \/* Sound sensor (unadjusted) *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_SOUND_DBA	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_SOUND_DBA       = 0x08, \/\/ Sound sensor (adjusted)$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_SOUND_DBA	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_SOUND_DBA       = 0x08, \/* Sound sensor (adjusted) *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_SOUND_DBA	nxt.h	/^    NXT_SENSORTYPE_SOUND_DBA       = 0x08, \/* Sound sensor (adjusted) *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_SWITCH	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_SWITCH          = 0x01,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_SWITCH	nxt.h	/^    NXT_SENSORTYPE_SWITCH          = 0x01,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_TEMPERATURE	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_TEMPERATURE     = 0x02,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_TEMPERATURE	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_TEMPERATURE     = 0x02, \/* RCX temperature sensor *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_TEMPERATURE	nxt.h	/^    NXT_SENSORTYPE_TEMPERATURE     = 0x02, \/* RCX temperature sensor *\/$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_TOUCH	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^    NXT_SENSORTYPE_TOUCH           = 0x01,$/;"	e	enum:nxt_sensor_type_e
NXT_SENSORTYPE_TOUCH	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	82;"	d
NXT_SENSORTYPE_TOUCH	nxt.h	82;"	d
NXT_SENSORTYPE_ULTRASONIC	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	81;"	d
NXT_SENSORTYPE_ULTRASONIC	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	83;"	d
NXT_SENSORTYPE_ULTRASONIC	nxt.h	83;"	d
NXT_SENSOR_MODE_E	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	86;"	d
NXT_SENSOR_MODE_E	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	88;"	d
NXT_SENSOR_MODE_E	nxt.h	88;"	d
NXT_SENSOR_TYPE_E	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	68;"	d
NXT_SENSOR_TYPE_E	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	64;"	d
NXT_SENSOR_TYPE_E	nxt.h	64;"	d
NXT_connectWithAddress	nxt.cpp	/^int NXT_connectWithAddress(br_comms_t* comms, const char* address, int channel)$/;"	f
NXT_getConfigFilePath	nxt.cpp	/^const char* NXT_getConfigFilePath(void)$/;"	f
NXT_init	nxt.cpp	/^int NXT_init(br_comms_t* comms)$/;"	f
OnBnClickedButtonAdd	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.cpp	/^void ConfigFileDialog::OnBnClickedButtonAdd()$/;"	f	class:ConfigFileDialog
OnBnClickedButtonMovedown	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.cpp	/^void ConfigFileDialog::OnBnClickedButtonMovedown()$/;"	f	class:ConfigFileDialog
OnBnClickedButtonMoveup	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.cpp	/^void ConfigFileDialog::OnBnClickedButtonMoveup()$/;"	f	class:ConfigFileDialog
OnBnClickedButtonRemove	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.cpp	/^void ConfigFileDialog::OnBnClickedButtonRemove()$/;"	f	class:ConfigFileDialog
OnBnClickedButtonTeachingAdddelay	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonTeachingAdddelay()$/;"	f	class:CTeachingDialog
OnBnClickedButtonTeachingConnect	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonTeachingConnect()$/;"	f	class:CTeachingDialog
OnBnClickedButtonTeachingDeletepos	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonTeachingDeletepos()$/;"	f	class:CTeachingDialog
OnBnClickedButtonTeachingDisconnect	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonTeachingDisconnect()$/;"	f	class:CTeachingDialog
OnBnClickedButtonTeachingMovedown	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonTeachingMovedown()$/;"	f	class:CTeachingDialog
OnBnClickedButtonTeachingMoveup	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonTeachingMoveup()$/;"	f	class:CTeachingDialog
OnBnClickedButtonTeachingRecord	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonTeachingRecord()$/;"	f	class:CTeachingDialog
OnBnClickedButtonTeachingSave	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonTeachingSave()$/;"	f	class:CTeachingDialog
OnBnClickedButtonclear	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonclear()$/;"	f	class:CTeachingDialog
OnBnClickedButtonplay	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonplay()$/;"	f	class:CTeachingDialog
OnBnClickedButtonstop	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnBnClickedButtonstop()$/;"	f	class:CTeachingDialog
OnContextMenu	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlContext.cpp	/^void CListCtrlContext::OnContextMenu(CWnd* wnd, CPoint pos)$/;"	f	class:CListCtrlContext
OnContextMenu	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlCtx.cpp	/^afx_msg void CListCtrlCtx::OnContextMenu(CWnd *pWnd, CPoint pos)$/;"	f	class:CListCtrlCtx
OnContextRemove	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnContextRemove()$/;"	f	class:CTeachingDialog
OnContextRename	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnContextRename()$/;"	f	class:CTeachingDialog
OnInitDialog	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.cpp	/^BOOL ConfigFileDialog::OnInitDialog()$/;"	f	class:ConfigFileDialog
OnInitDialog	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CiMobotController_WindowsDlg
OnLvnEndlabeleditListRecordedmotions	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnLvnEndlabeleditListRecordedmotions(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CTeachingDialog
OnLvnItemActivateListRecordedmotions	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnLvnItemActivateListRecordedmotions(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CTeachingDialog
OnLvnItemchangedListRecordedmotions	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnLvnItemchangedListRecordedmotions(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CTeachingDialog
OnMobotButton	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnMobotButton(CMobot *robot, int button, int buttonDown)$/;"	f	class:CTeachingDialog
OnNMRClickListRecordedmotions	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnNMRClickListRecordedmotions(NMHDR *pNMHDR, LRESULT *pResult)$/;"	f	class:CTeachingDialog
OnOK	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CiMobotController_WindowsDlg
OnPaint	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CiMobotController_WindowsDlg
OnQueryDragIcon	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CiMobotController_WindowsDlg
OnRecordPopupMovedown	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnRecordPopupMovedown()$/;"	f	class:CTeachingDialog
OnRecordPopupMoveup	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnRecordPopupMoveup()$/;"	f	class:CTeachingDialog
OnRecordedGotopose	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnRecordedGotopose()$/;"	f	class:CTeachingDialog
OnRecordedMotionContextMenu	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::OnRecordedMotionContextMenu(CPoint point, void *arg)$/;"	f	class:CTeachingDialog
OnSysCommand	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	f	class:CiMobotController_WindowsDlg
PACKAGE	chnxt/Makefile	/^PACKAGE = chnxt$/;"	m
PACKAGE	chnxt/chnxt-1.0.7/Makefile	/^PACKAGE = chnxt$/;"	m
PACKAGE	chnxt/chnxt-2.0.0/Makefile	/^PACKAGE = chnxt$/;"	m
PKGDIR	chnxt/Makefile	/^PKGDIR = $(PACKAGE)-$(VERSION)\/$(PACKAGE)$/;"	m
PKGDIR	chnxt/chnxt-1.0.7/Makefile	/^PKGDIR = $(PACKAGE)-$(VERSION)\/$(PACKAGE)$/;"	m
PKGDIR	chnxt/chnxt-2.0.0/Makefile	/^PKGDIR = $(PACKAGE)-$(VERSION)\/$(PACKAGE)$/;"	m
PORT	mobot_new.cpp	188;"	d	file:
RAD2DEG	mobot_internal.h	24;"	d
RAD2DEG	nxt_internal.h	31;"	d
RECORD_ANGLE_ALLOC_SIZE	mobot_new.cpp	1523;"	d	file:
REM_MOTOR_IDLE	nxt_internal.h	/^    REM_MOTOR_IDLE  = 0x00,$/;"	e	enum:__anon6
REM_MOTOR_SPEED	nxt_internal.h	/^    REM_MOTOR_SPEED = 0x01,$/;"	e	enum:__anon6
REM_MOTOR_SYNC	nxt_internal.h	/^    REM_MOTOR_SYNC  = 0x02$/;"	e	enum:__anon6
RESP_END	commands.h	17;"	d
RESP_ERR	commands.h	18;"	d
RESP_OK	commands.h	16;"	d
RM_BRAKE	nxt_internal.h	/^    RM_BRAKE      = 0x02,$/;"	e	enum:__anon5
RM_IDLE	nxt_internal.h	/^    RM_IDLE       = 0x00,$/;"	e	enum:__anon5
RM_MOTORON	nxt_internal.h	/^    RM_MOTORON    = 0x01,$/;"	e	enum:__anon5
RM_REGULATED	nxt_internal.h	/^    RM_REGULATED  = 0x04$/;"	e	enum:__anon5
ROBOT_BACKWARD	mobot.h	/^    ROBOT_BACKWARD,$/;"	e	enum:robotJointState_e
ROBOT_BACKWARD	mobot_internal.h	/^    ROBOT_BACKWARD,$/;"	e	enum:robotJointState_e
ROBOT_BACKWARD	nxt_internal.h	/^    ROBOT_BACKWARD,$/;"	e	enum:robotJointState_e
ROBOT_FORWARD	mobot.h	/^    ROBOT_FORWARD,$/;"	e	enum:robotJointState_e
ROBOT_FORWARD	mobot_internal.h	/^    ROBOT_FORWARD,$/;"	e	enum:robotJointState_e
ROBOT_FORWARD	nxt_internal.h	/^    ROBOT_FORWARD,$/;"	e	enum:robotJointState_e
ROBOT_HOLD	mobot.h	/^    ROBOT_HOLD,$/;"	e	enum:robotJointState_e
ROBOT_HOLD	mobot_internal.h	/^    ROBOT_HOLD,$/;"	e	enum:robotJointState_e
ROBOT_HOLD	nxt_internal.h	/^    ROBOT_HOLD,$/;"	e	enum:robotJointState_e
ROBOT_JOINT1	mobot.h	/^  ROBOT_JOINT1,$/;"	e	enum:robotJoints_e
ROBOT_JOINT1	mobot_internal.h	/^  ROBOT_JOINT1,$/;"	e	enum:mobot_joints_e
ROBOT_JOINT1	nxt_internal.h	/^  ROBOT_JOINT1,$/;"	e	enum:mobot_joints_e
ROBOT_JOINT2	mobot.h	/^  ROBOT_JOINT2,$/;"	e	enum:robotJoints_e
ROBOT_JOINT2	mobot_internal.h	/^  ROBOT_JOINT2,$/;"	e	enum:mobot_joints_e
ROBOT_JOINT2	nxt_internal.h	/^  ROBOT_JOINT2,$/;"	e	enum:mobot_joints_e
ROBOT_JOINT3	mobot.h	/^  ROBOT_JOINT3,$/;"	e	enum:robotJoints_e
ROBOT_JOINT3	mobot_internal.h	/^  ROBOT_JOINT3,$/;"	e	enum:mobot_joints_e
ROBOT_JOINT3	nxt_internal.h	/^  ROBOT_JOINT3,$/;"	e	enum:mobot_joints_e
ROBOT_JOINT4	mobot.h	/^  ROBOT_JOINT4,$/;"	e	enum:robotJoints_e
ROBOT_JOINT4	mobot_internal.h	/^  ROBOT_JOINT4,$/;"	e	enum:mobot_joints_e
ROBOT_JOINT4	nxt_internal.h	/^  ROBOT_JOINT4,$/;"	e	enum:mobot_joints_e
ROBOT_JOINTS_E	mobot.h	57;"	d
ROBOT_JOINTS_E	mobot_internal.h	75;"	d
ROBOT_JOINTS_E	nxt_internal.h	108;"	d
ROBOT_JOINT_DIRECTION_E	mobot_internal.h	98;"	d
ROBOT_JOINT_DIRECTION_E	nxt_internal.h	131;"	d
ROBOT_JOINT_DIR_AUTO	mobot_internal.h	/^  ROBOT_JOINT_DIR_AUTO,$/;"	e	enum:mobot_motor_direction_e
ROBOT_JOINT_DIR_AUTO	nxt_internal.h	/^  ROBOT_JOINT_DIR_AUTO,$/;"	e	enum:mobot_motor_direction_e
ROBOT_JOINT_DIR_BACKWARD	mobot_internal.h	/^  ROBOT_JOINT_DIR_BACKWARD$/;"	e	enum:mobot_motor_direction_e
ROBOT_JOINT_DIR_BACKWARD	nxt_internal.h	/^  ROBOT_JOINT_DIR_BACKWARD$/;"	e	enum:mobot_motor_direction_e
ROBOT_JOINT_DIR_FORWARD	mobot_internal.h	/^  ROBOT_JOINT_DIR_FORWARD,$/;"	e	enum:mobot_motor_direction_e
ROBOT_JOINT_DIR_FORWARD	nxt_internal.h	/^  ROBOT_JOINT_DIR_FORWARD,$/;"	e	enum:mobot_motor_direction_e
ROBOT_JOINT_STATE_E	mobot.h	69;"	d
ROBOT_JOINT_STATE_E	mobot_internal.h	87;"	d
ROBOT_JOINT_STATE_E	nxt_internal.h	120;"	d
ROBOT_NEUTRAL	mobot.h	/^    ROBOT_NEUTRAL = 0,$/;"	e	enum:robotJointState_e
ROBOT_NEUTRAL	mobot_internal.h	/^    ROBOT_NEUTRAL = 0,$/;"	e	enum:robotJointState_e
ROBOT_NEUTRAL	nxt_internal.h	/^    ROBOT_NEUTRAL = 0,$/;"	e	enum:robotJointState_e
ROBOT_NUM_JOINTS	mobot.h	/^  ROBOT_NUM_JOINTS = 4$/;"	e	enum:robotJoints_e
ROBOT_NUM_JOINTS	mobot_internal.h	/^  ROBOT_NUM_JOINTS = 4$/;"	e	enum:mobot_joints_e
ROBOT_NUM_JOINTS	nxt_internal.h	/^  ROBOT_NUM_JOINTS = 4$/;"	e	enum:mobot_joints_e
ROBOT_ZERO	mobot.h	/^  ROBOT_ZERO,$/;"	e	enum:robotJoints_e
ROBOT_ZERO	mobot_internal.h	/^  ROBOT_ZERO,$/;"	e	enum:mobot_joints_e
ROBOT_ZERO	nxt_internal.h	/^  ROBOT_ZERO,$/;"	e	enum:mobot_joints_e
RS_IDLE	nxt_internal.h	/^    RS_IDLE     = 0x00,$/;"	e	enum:__anon7
RS_RAMPDOWN	nxt_internal.h	/^    RS_RAMPDOWN = 0x40$/;"	e	enum:__anon7
RS_RAMPUP	nxt_internal.h	/^    RS_RAMPUP   = 0x10,$/;"	e	enum:__anon7
RS_RUNNING	nxt_internal.h	/^    RS_RUNNING  = 0x20,$/;"	e	enum:__anon7
RWLOCK_DESTROY	thread_macros.h	136;"	d
RWLOCK_DESTROY	thread_macros.h	139;"	d
RWLOCK_DESTROY	thread_macros.h	294;"	d
RWLOCK_INIT	thread_macros.h	128;"	d
RWLOCK_INIT	thread_macros.h	131;"	d
RWLOCK_INIT	thread_macros.h	291;"	d
RWLOCK_RDLOCK	thread_macros.h	144;"	d
RWLOCK_RDLOCK	thread_macros.h	157;"	d
RWLOCK_RDLOCK	thread_macros.h	296;"	d
RWLOCK_RDUNLOCK	thread_macros.h	147;"	d
RWLOCK_RDUNLOCK	thread_macros.h	159;"	d
RWLOCK_RDUNLOCK	thread_macros.h	298;"	d
RWLOCK_T	thread_macros.h	122;"	d
RWLOCK_T	thread_macros.h	124;"	d
RWLOCK_T	thread_macros.h	289;"	d
RWLOCK_WRLOCK	thread_macros.h	150;"	d
RWLOCK_WRLOCK	thread_macros.h	161;"	d
RWLOCK_WRLOCK	thread_macros.h	300;"	d
RWLOCK_WRUNLOCK	thread_macros.h	153;"	d
RWLOCK_WRUNLOCK	thread_macros.h	163;"	d
RWLOCK_WRUNLOCK	thread_macros.h	302;"	d
RecvFromIMobot	mobot.cpp	/^int RecvFromIMobot(br_comms_t* comms, uint8_t* buf, int size)$/;"	f
RecvFromIMobot	mobot_new.cpp	/^int RecvFromIMobot(mobot_t* comms, uint8_t* buf, int size)$/;"	f
RecvFromIMobot2	mobot.cpp	/^int RecvFromIMobot2(br_comms_t* comms, char* buf, int size)$/;"	f
RecvFromIMobot2	mobot_new.cpp	/^int RecvFromIMobot2(mobot_t* comms, char* buf, int size)$/;"	f
Refresh	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.cpp	/^void ConfigFileDialog::Refresh()$/;"	f	class:ConfigFileDialog
RobotManager	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^RobotManager::RobotManager()$/;"	f	class:RobotManager
RobotManager	demos/iMobotController_Windows/iMobotController_Windows/robotManager.h	/^class RobotManager : public ConfigFile$/;"	c
SEMAPHORE_DESTROY	thread_macros.h	109;"	d
SEMAPHORE_DESTROY	thread_macros.h	277;"	d
SEMAPHORE_INIT	thread_macros.h	106;"	d
SEMAPHORE_INIT	thread_macros.h	270;"	d
SEMAPHORE_POST	thread_macros.h	114;"	d
SEMAPHORE_POST	thread_macros.h	281;"	d
SEMAPHORE_T	thread_macros.h	104;"	d
SEMAPHORE_T	thread_macros.h	268;"	d
SEMAPHORE_WAIT	thread_macros.h	112;"	d
SEMAPHORE_WAIT	thread_macros.h	279;"	d
SET_ANGLES	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	412;"	d	file:
SIGNAL	thread_macros.h	255;"	d
SIGNAL	thread_macros.h	90;"	d
S_M1P	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  S_M1P, \/\/ Motor position sliders$/;"	e	enum:button_e
S_M1S	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  S_M1S, \/\/ Sliders, motor 1 speed$/;"	e	enum:button_e
S_M2P	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  S_M2P, $/;"	e	enum:button_e
S_M2S	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  S_M2S,$/;"	e	enum:button_e
S_M3P	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  S_M3P, $/;"	e	enum:button_e
S_M3S	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  S_M3S,$/;"	e	enum:button_e
SendToIMobot	mobot.cpp	/^int SendToIMobot(br_comms_t* comms, uint8_t cmd, const void* data, int datasize)$/;"	f
SendToIMobot	mobot_new.cpp	/^int SendToIMobot(mobot_t* comms, uint8_t cmd, const void* data, int datasize)$/;"	f
SendToMobotDirect	mobot_new.cpp	/^int SendToMobotDirect(mobot_t* comms, const void* data, int datasize)$/;"	f
SendToNXT	nxt.cpp	/^int SendToNXT(br_comms_t* comms, const char str[], int datasize)$/;"	f
THREAD_CANCEL	thread_macros.h	188;"	d
THREAD_CANCEL	thread_macros.h	20;"	d
THREAD_CREATE	thread_macros.h	10;"	d
THREAD_CREATE	thread_macros.h	178;"	d
THREAD_DETACH	thread_macros.h	197;"	d
THREAD_DETACH	thread_macros.h	26;"	d
THREAD_EXIT	thread_macros.h	194;"	d
THREAD_EXIT	thread_macros.h	31;"	d
THREAD_JOIN	thread_macros.h	191;"	d
THREAD_JOIN	thread_macros.h	23;"	d
THREAD_T	thread_macros.h	175;"	d
THREAD_T	thread_macros.h	9;"	d
UINT8	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	9;"	d
UINT8	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	9;"	d
UINT8	mobot.h	19;"	d
UINT8	nxt.h	9;"	d
UpdateGuiCriticalSection	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	v
VC_EXTRALEAN	demos/iMobotController_Windows/iMobotController_Windows/stdafx.h	12;"	d
VERSION	chnxt/Makefile	/^VERSION = 2.0.0$/;"	m
VERSION	chnxt/chnxt-1.0.7/Makefile	/^VERSION = 1.0.7$/;"	m
VERSION	chnxt/chnxt-2.0.0/Makefile	/^VERSION = 1.0.7$/;"	m
WINVER	demos/iMobotController_Windows/iMobotController_Windows/targetver.h	12;"	d
_AFX_ALL_WARNINGS	demos/iMobotController_Windows/iMobotController_Windows/stdafx.h	20;"	d
_APS_NEXT_COMMAND_VALUE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	165;"	d
_APS_NEXT_CONTROL_VALUE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	166;"	d
_APS_NEXT_RESOURCE_VALUE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	164;"	d
_APS_NEXT_SYMED_VALUE	demos/iMobotController_Windows/iMobotController_Windows/resource.h	167;"	d
_ATL_CSTRING_EXPLICIT_CONSTRUCTORS	demos/iMobotController_Windows/iMobotController_Windows/stdafx.h	17;"	d
_COMMANDS_H_	commands.h	2;"	d
_CONFIG_FILE_H_	demos/iMobotController_Windows/iMobotController_Windows/configFile.h	2;"	d
_GAIT_H_	demos/iMobotController_Windows/iMobotController_Windows/gait.h	2;"	d
_MOBOTCOMMS_H_	mobot.h	2;"	d
_MOBOT_INTERNAL_H_	mobot_internal.h	2;"	d
_NXT_H	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	2;"	d
_NXT_H	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	2;"	d
_NXT_H	nxt.h	2;"	d
_NXT_INTERNAL_H	nxt_internal.h	2;"	d
_ROBOT_MANAGER_H_	demos/iMobotController_Windows/iMobotController_Windows/robotManager.h	2;"	d
_SECURE_ATL	demos/iMobotController_Windows/iMobotController_Windows/stdafx.h	8;"	d
_THREAD_MACROS_H_	thread_macros.h	2;"	d
_WIN32	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	7;"	d
_WIN32	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	7;"	d
_WIN32	mobot.h	17;"	d
_WIN32	nxt.h	7;"	d
_WIN32_IE	demos/iMobotController_Windows/iMobotController_Windows/targetver.h	24;"	d
_WIN32_WINDOWS	demos/iMobotController_Windows/iMobotController_Windows/targetver.h	20;"	d
_WIN32_WINNT	demos/iMobotController_Windows/iMobotController_Windows/targetver.h	16;"	d
_address	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^  char _address[80];$/;"	m	class:CRecordMobot
_addresses	demos/iMobotController_Windows/iMobotController_Windows/configFile.h	/^    char *_addresses[100];$/;"	m	class:ConfigFile
_angles	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  double _angles[4];$/;"	m	class:Motion
_comms	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^	br_comms_t _comms;$/;"	m	class:ChNXT
_comms	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        br_comms_t _comms;$/;"	m	class:ChNXT
_comms	mobot.h	/^    br_comms_t _comms;$/;"	m	class:CMobot
_comms	nxt.h	/^        br_comms_t _comms;$/;"	m	class:ChNXT
_configFile	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.h	/^  ConfigFile _configFile;$/;"	m	class:ConfigFileDialog
_connected	demos/iMobotController_Windows/iMobotController_Windows/robotManager.h	/^    bool _connected[MAX_CONNECTED]; \/* Index by ConfigFile *\/$/;"	m	class:RobotManager
_connectedAddresses	demos/iMobotController_Windows/iMobotController_Windows/robotManager.h	/^    char *_connectedAddresses[MAX_CONNECTED];$/;"	m	class:RobotManager
_edit_AddressBox	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.h	/^	CEdit _edit_AddressBox;$/;"	m	class:ConfigFileDialog
_listbox_Addresses	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.h	/^	CListBox _listbox_Addresses;$/;"	m	class:ConfigFileDialog
_mobots	demos/iMobotController_Windows/iMobotController_Windows/robotManager.h	/^    CRecordMobot *_mobots[MAX_CONNECTED];$/;"	m	class:RobotManager
_motionInProgress	mobot.h	/^    int _motionInProgress;$/;"	m	class:CMobotGroup
_motion_type	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  motion_type_t _motion_type;$/;"	m	class:Motion
_motions	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	struct motion_s **_motions;$/;"	m	class:CRecordMobot	typeref:struct:CRecordMobot::motion_s
_motions	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  Motion *_motions;$/;"	m	class:Gait
_motor_mask	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  unsigned char _motor_mask;$/;"	m	class:Motion
_name	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	TCHAR _name[80];$/;"	m	class:CRecordMobot
_name	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  WCHAR* _name;$/;"	m	class:Gait
_name	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  char* _name;$/;"	m	class:Gait
_numEntries	demos/iMobotController_Windows/iMobotController_Windows/configFile.h	/^    int _numEntries;$/;"	m	class:ConfigFile
_numMotions	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	int _numMotions;$/;"	m	class:CRecordMobot
_numMotions	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  int _numMotions;$/;"	m	class:Gait
_numMotionsAllocated	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	int _numMotionsAllocated;$/;"	m	class:CRecordMobot
_numMotionsAllocated	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  int _numMotionsAllocated;$/;"	m	class:Gait
_numRobots	mobot.h	/^    int _numRobots;$/;"	m	class:CMobotGroup
_path	demos/iMobotController_Windows/iMobotController_Windows/configFile.h	/^    char *_path;$/;"	m	class:ConfigFile
_path	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.h	/^  char _path[MAX_PATH];$/;"	m	class:ConfigFileDialog
_robotManager	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^RobotManager CTeachingDialog::_robotManager;$/;"	m	class:CTeachingDialog	file:
_robotManager	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^  static RobotManager _robotManager;$/;"	m	class:CTeachingDialog
_robots	mobot.h	/^    CMobot *_robots[64];$/;"	m	class:CMobotGroup
_thread	mobot.h	/^    THREAD_T* _thread;$/;"	m	class:CMobotGroup
_thread	mobot.h	/^    void* _thread;$/;"	m	class:CMobotGroup
addDelay	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::addDelay(double seconds)$/;"	f	class:CRecordMobot
addEntry	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^int ConfigFile::addEntry(const char* entry)$/;"	f	class:ConfigFile
addMotion	demos/iMobotController_Windows/iMobotController_Windows/gait.cpp	/^int Gait::addMotion(Motion* motion)$/;"	f	class:Gait
addRobot	mobot.cpp	/^int CMobotGroup::addRobot(CMobot& robot)$/;"	f	class:CMobotGroup
addRobot	mobot_new.cpp	/^int CMobotGroup::addRobot(CMobot& robot)$/;"	f	class:CMobotGroup
addr	mobot_internal.h	/^  sockaddr_t addr;$/;"	m	struct:br_comms_s
addr	nxt_internal.h	/^  sockaddr_t addr;$/;"	m	struct:br_comms_s
angle	mobot.h	/^  double *angle;$/;"	m	struct:recordAngleArg_s
angle2	mobot.h	/^  double *angle2;$/;"	m	struct:recordAngleArg_s
angle2distance	mobot.h	51;"	d
angle3	mobot.h	/^  double *angle3;$/;"	m	struct:recordAngleArg_s
angle4	mobot.h	/^  double *angle4;$/;"	m	struct:recordAngleArg_s
argDouble	mobot.h	/^    double argDouble;$/;"	m	class:CMobotGroup
argInt	mobot.h	/^    int argInt;$/;"	m	class:CMobotGroup
availableIndexToIndex	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^int RobotManager::availableIndexToIndex(int availableIndex)$/;"	f	class:RobotManager
b	mobot_internal.h	/^  UINT8 b[6];$/;"	m	struct:bdaddr_s
b	nxt_internal.h	/^  UINT8 b[6];$/;"	m	struct:bdaddr_s
baSwap	nxt.cpp	/^void baSwap(bdaddr_t *dst, const bdaddr_t *src)$/;"	f
baswap	mobot.cpp	/^void baswap(bdaddr_t *dst, const bdaddr_t *src)$/;"	f
baswap	mobot_new.cpp	/^void baswap(bdaddr_t *dst, const bdaddr_t *src)$/;"	f
bdaddr_s	mobot_internal.h	/^typedef struct bdaddr_s {$/;"	s
bdaddr_s	nxt_internal.h	/^typedef struct bdaddr_s {$/;"	s
bdaddr_t	mobot_internal.h	/^} bdaddr_t;$/;"	t	typeref:struct:bdaddr_s
bdaddr_t	nxt_internal.h	/^} bdaddr_t;$/;"	t	typeref:struct:bdaddr_s
blinkLED	mobot.cpp	/^int CMobot::blinkLED(double delay, int numBlinks)$/;"	f	class:CMobot
blinkLED	mobot_new.cpp	/^int CMobot::blinkLED(double delay, int numBlinks)$/;"	f	class:CMobot
br_comms_s	mobot_internal.h	/^typedef struct br_comms_s$/;"	s
br_comms_s	nxt_internal.h	/^typedef struct br_comms_s$/;"	s
br_comms_t	mobot_internal.h	/^} br_comms_t;$/;"	t	typeref:struct:br_comms_s
br_comms_t	nxt_internal.h	/^} br_comms_t;$/;"	t	typeref:struct:br_comms_s
btAddress	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        char btAddress[18];$/;"	m	class:ChNXT
btAddress	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        char btAddress[18];$/;"	m	class:ChNXT
btAddress	nxt.h	/^        char btAddress[18];$/;"	m	class:ChNXT
button	mobot_internal.h	/^  int button;$/;"	m	struct:callbackArg_s
button	nxt_internal.h	/^  int button;$/;"	m	struct:callbackArg_s
buttonCallback	mobot.h	/^    void (*buttonCallback)(CMobot *robot, int button, int buttonDown);$/;"	m	class:CMobot
buttonCallback	mobot_internal.h	/^  void (*buttonCallback)(void* robot, int button, int buttonDown);$/;"	m	struct:br_comms_s
buttonCallback	nxt_internal.h	/^  void (*buttonCallback)(void* robot, int button, int buttonDown);$/;"	m	struct:br_comms_s
buttonDown	mobot_internal.h	/^  int buttonDown;$/;"	m	struct:callbackArg_s
buttonDown	nxt_internal.h	/^  int buttonDown;$/;"	m	struct:callbackArg_s
buttonId_t	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^} buttonId_t;$/;"	t	typeref:enum:button_e
buttonState_s	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^typedef struct buttonState_s$/;"	s
buttonState_t	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^} buttonState_t;$/;"	t	typeref:struct:buttonState_s
button_clear	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^  CButton button_clear;$/;"	m	class:CTeachingDialog
button_e	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^typedef enum button_e$/;"	g
button_play	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	CButton button_play;$/;"	m	class:CTeachingDialog
button_stop	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	CButton button_stop;$/;"	m	class:CTeachingDialog
button_teachingLoopCheck	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	CButton button_teachingLoopCheck;$/;"	m	class:CTeachingDialog
callbackArg_s	mobot_internal.h	/^typedef struct callbackArg_s$/;"	s
callbackArg_s	nxt_internal.h	/^typedef struct callbackArg_s$/;"	s
callbackArg_t	mobot_internal.h	/^} callbackArg_t;$/;"	t	typeref:struct:callbackArg_s
callbackArg_t	nxt_internal.h	/^} callbackArg_t;$/;"	t	typeref:struct:callbackArg_s
callbackEnabled	mobot_internal.h	/^  int callbackEnabled;$/;"	m	struct:br_comms_s
callbackEnabled	nxt_internal.h	/^  int callbackEnabled;$/;"	m	struct:br_comms_s
callbackThread	mobot.cpp	/^void* callbackThread(void* arg)$/;"	f
callbackThread	mobot_new.cpp	/^void* callbackThread(void* arg)$/;"	f
callback_lock	mobot_internal.h	/^  MUTEX_T* callback_lock;$/;"	m	struct:br_comms_s
callback_lock	nxt_internal.h	/^  MUTEX_T* callback_lock;$/;"	m	struct:br_comms_s
changed	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	int changed;$/;"	m	struct:comboBoxState_s
checkJointRunDirection	nxt.cpp	/^int ChNXT::checkJointRunDirection(nxtJointId_t id, int dir){$/;"	f	class:ChNXT
checkJointSpeedRatioValidation	nxt.cpp	/^int ChNXT::checkJointSpeedRatioValidation(double &ratio){$/;"	f	class:ChNXT
clearAllMotions	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::clearAllMotions()$/;"	f	class:CRecordMobot
clicked	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  int clicked;$/;"	m	struct:buttonState_s
comboBoxState_s	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^typedef struct comboBoxState_s$/;"	s
comboBoxState_t	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^} comboBoxState_t;$/;"	t	typeref:struct:comboBoxState_s
comms	mobot.h	/^  br_comms_t* comms;$/;"	m	struct:recordAngleArg_s
comms	mobot_internal.h	/^  br_comms_t* comms;$/;"	m	struct:callbackArg_s
comms	nxt_internal.h	/^  br_comms_t* comms;$/;"	m	struct:callbackArg_s
commsBusy	mobot_internal.h	/^  int commsBusy;$/;"	m	struct:br_comms_s
commsBusy	nxt_internal.h	/^  int commsBusy;$/;"	m	struct:br_comms_s
commsBusy_cond	mobot_internal.h	/^  COND_T* commsBusy_cond;$/;"	m	struct:br_comms_s
commsBusy_cond	nxt_internal.h	/^  COND_T* commsBusy_cond;$/;"	m	struct:br_comms_s
commsBusy_lock	mobot_internal.h	/^  MUTEX_T* commsBusy_lock;$/;"	m	struct:br_comms_s
commsBusy_lock	nxt_internal.h	/^  MUTEX_T* commsBusy_lock;$/;"	m	struct:br_comms_s
commsEngine	mobot.cpp	/^void* commsEngine(void* arg)$/;"	f
commsEngine	mobot_new.cpp	/^void* commsEngine(void* arg)$/;"	f
commsLock	mobot_internal.h	/^  MUTEX_T* commsLock;$/;"	m	struct:br_comms_s
commsLock	nxt_internal.h	/^  MUTEX_T* commsLock;$/;"	m	struct:br_comms_s
commsThread	mobot_internal.h	/^  THREAD_T commsThread;$/;"	m	struct:br_comms_s
commsThread	nxt_internal.h	/^  THREAD_T commsThread;$/;"	m	struct:br_comms_s
configFilePath	nxt_internal.h	/^  char* configFilePath;$/;"	m	struct:br_comms_s
connect	chnxt/chnxt.c	/^int ChNXT::connect() {$/;"	f	class:ChNXT
connect	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^int RobotManager::connect(int availableIndex)$/;"	f	class:RobotManager
connect	mobot.cpp	/^int CMobot::connect()$/;"	f	class:CMobot
connect	mobot_new.cpp	/^int CMobot::connect()$/;"	f	class:CMobot
connect	nxt.cpp	/^int ChNXT::connect(void) {$/;"	f	class:ChNXT
connectWithAddress	chnxt/chnxt.c	/^int ChNXT::connectWithAddress(char *usr_addr, int channel) {$/;"	f	class:ChNXT
connectWithAddress	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::connectWithAddress(const char address[], int channel)$/;"	f	class:CRecordMobot
connectWithAddress	mobot.cpp	/^int CMobot::connectWithAddress(const char* address, int channel)$/;"	f	class:CMobot
connectWithAddress	mobot_new.cpp	/^int CMobot::connectWithAddress(const char* address, int channel)$/;"	f	class:CMobot
connectWithAddress	nxt.cpp	/^int ChNXT::connectWithAddress(char usr_address[18], int channel) {$/;"	f	class:ChNXT
connectWithAddress_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int connectWithAddress_chdl(void *varg) {$/;"	f
connectWithAddress_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int connectWithAddress_chdl(void *varg) {$/;"	f
connectWithTTY	mobot.cpp	/^int CMobot::connectWithTTY(const char* ttyfilename)$/;"	f	class:CMobot
connectWithTTY	mobot_new.cpp	/^int CMobot::connectWithTTY(const char* ttyfilename)$/;"	f	class:CMobot
connect_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int connect_chdl(void *varg) {$/;"	f
connect_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int connect_chdl(void *varg) {$/;"	f
connected	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int connected;$/;"	m	class:ChNXT
connected	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int connected;$/;"	m	class:ChNXT
connected	mobot_internal.h	/^  int connected;$/;"	m	struct:br_comms_s
connected	nxt.h	/^        int connected;$/;"	m	class:ChNXT
connected	nxt_internal.h	/^  int connected;$/;"	m	struct:br_comms_s
contextMenuIndex	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	int contextMenuIndex;$/;"	m	class:CTeachingDialog
data	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	} data;$/;"	m	struct:motion_s	typeref:union:motion_s::data_u
data_u	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	union data_u {$/;"	u	struct:motion_s
deg2rad	mobot.cpp	/^double deg2rad(double deg)$/;"	f
deg2rad	mobot_new.cpp	/^double deg2rad(double deg)$/;"	f
diff_msecs	mobot.cpp	/^unsigned int diff_msecs(struct timespec t1, struct timespec t2)$/;"	f
diff_msecs	mobot_new.cpp	/^unsigned int diff_msecs(struct timespec t1, struct timespec t2)$/;"	f
disableButtonCallback	mobot.cpp	/^int CMobot::disableButtonCallback()$/;"	f	class:CMobot
disableButtonCallback	mobot_new.cpp	/^int CMobot::disableButtonCallback()$/;"	f	class:CMobot
disconnect	chnxt/chnxt.c	/^int ChNXT::disconnect() {$/;"	f	class:ChNXT
disconnect	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^int RobotManager::disconnect(int connectIndex)$/;"	f	class:RobotManager
disconnect	mobot.cpp	/^int CMobot::disconnect()$/;"	f	class:CMobot
disconnect	mobot_new.cpp	/^int CMobot::disconnect()$/;"	f	class:CMobot
disconnect	nxt.cpp	/^int ChNXT::disconnect(void) {$/;"	f	class:ChNXT
disconnect_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int disconnect_chdl(void *varg) {$/;"	f
disconnect_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int disconnect_chdl(void *varg) {$/;"	f
distance2angle	mobot.h	52;"	d
driveJointToDirect	mobot_new.cpp	/^int CMobot::driveJointToDirect(mobotJointId_t id, double angle)$/;"	f	class:CMobot
driveJointToDirect	mobot_new.cpp	/^int CMobotGroup::driveJointToDirect(mobotJointId_t id, double angle)$/;"	f	class:CMobotGroup
driveJointToDirectNB	mobot_new.cpp	/^int CMobot::driveJointToDirectNB(mobotJointId_t id, double angle)$/;"	f	class:CMobot
driveJointToDirectNB	mobot_new.cpp	/^int CMobotGroup::driveJointToDirectNB(mobotJointId_t id, double angle)$/;"	f	class:CMobotGroup
driveToDirect	mobot_new.cpp	/^int CMobot::driveToDirect( double angle1,$/;"	f	class:CMobot
driveToDirect	mobot_new.cpp	/^int CMobotGroup::driveToDirect(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
driveToDirectNB	mobot_new.cpp	/^int CMobot::driveToDirectNB( double angle1,$/;"	f	class:CMobot
driveToDirectNB	mobot_new.cpp	/^int CMobotGroup::driveToDirectNB(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
edit_teachingDelay	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	CEdit edit_teachingDelay;$/;"	m	class:CTeachingDialog
enableButtonCallback	mobot.cpp	/^int CMobot::enableButtonCallback(void (*buttonCallback)(CMobot* robot, int button, int buttonDown))$/;"	f	class:CMobot
enableButtonCallback	mobot_new.cpp	/^int CMobot::enableButtonCallback(void (*buttonCallback)(CMobot* mobot, int button, int buttonDown))$/;"	f	class:CMobot
error	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int error;$/;"	m	class:ChNXT
error	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int error;$/;"	m	class:ChNXT
error	nxt.h	/^        int error;$/;"	m	class:ChNXT
finishConnect	mobot.cpp	/^int finishConnect(br_comms_t* comms)$/;"	f
finishConnect	mobot_new.cpp	/^int finishConnect(mobot_t* comms)$/;"	f
g_buttonState	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	v
g_chmobot_dlcount	mobot.h	/^    static int g_chmobot_dlcount;$/;"	m	class:CMobot
g_chmobot_dlcount	mobot.h	/^int CMobot::g_chmobot_dlcount = 0;$/;"	m	class:CMobot
g_chmobot_dlhandle	mobot.h	/^    static void *g_chmobot_dlhandle;$/;"	m	class:CMobot
g_chmobot_dlhandle	mobot.h	/^void * CMobot::g_chmobot_dlhandle = NULL;$/;"	m	class:CMobot
g_chnxt_dlcount	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        static int g_chnxt_dlcount;$/;"	m	class:ChNXT
g_chnxt_dlcount	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^int ChNXT::g_chnxt_dlcount = 0;$/;"	m	class:ChNXT
g_chnxt_dlcount	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        static int g_chnxt_dlcount;$/;"	m	class:ChNXT
g_chnxt_dlcount	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^int ChNXT::g_chnxt_dlcount = 0;$/;"	m	class:ChNXT
g_chnxt_dlcount	nxt.h	/^        static int g_chnxt_dlcount;$/;"	m	class:ChNXT
g_chnxt_dlcount	nxt.h	/^int ChNXT::g_chnxt_dlcount = 0;$/;"	m	class:ChNXT
g_chnxt_dlhandle	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        static void *g_chnxt_dlhandle;$/;"	m	class:ChNXT
g_chnxt_dlhandle	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^void * ChNXT::g_chnxt_dlhandle = NULL;$/;"	m	class:ChNXT
g_chnxt_dlhandle	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        static void *g_chnxt_dlhandle;$/;"	m	class:ChNXT
g_chnxt_dlhandle	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^void * ChNXT::g_chnxt_dlhandle = NULL;$/;"	m	class:ChNXT
g_chnxt_dlhandle	nxt.h	/^        static void *g_chnxt_dlhandle;$/;"	m	class:ChNXT
g_chnxt_dlhandle	nxt.h	/^void * ChNXT::g_chnxt_dlhandle = NULL;$/;"	m	class:ChNXT
g_comboBoxState	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	/^/;"	v
g_numConnected	mobot.cpp	/^int g_numConnected = 0;$/;"	v
g_numConnected	mobot_new.cpp	/^int g_numConnected = 0;$/;"	v
g_teachingDialog	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^CTeachingDialog *g_teachingDialog;$/;"	v
generateProgram	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^CString* RobotManager::generateProgram(bool looped)$/;"	f	class:RobotManager
getAddress	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^const char* CRecordMobot::getAddress()$/;"	f	class:CRecordMobot
getAngles	demos/iMobotController_Windows/iMobotController_Windows/gait.cpp	/^const double* Motion::getAngles() const$/;"	f	class:Motion
getConfigFilePath	mobot_new.cpp	/^const char* CMobot::getConfigFilePath()$/;"	f	class:CMobot
getConnected	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^const char* RobotManager::getConnected(int connectIndex) {$/;"	f	class:RobotManager
getEntry	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^const char* ConfigFile::getEntry(int index)$/;"	f	class:ConfigFile
getJointAngle	chnxt/chnxt.c	/^int ChNXT::getJointAngle(nxtJointId_t id, int *angle) {$/;"	f	class:ChNXT
getJointAngle	mobot.cpp	/^int CMobot::getJointAngle(robotJointId_t id, double &angle)$/;"	f	class:CMobot
getJointAngle	mobot_new.cpp	/^int CMobot::getJointAngle(mobotJointId_t id, double &angle)$/;"	f	class:CMobot
getJointAngle	nxt.cpp	/^int ChNXT::getJointAngle(nxtJointId_t id, double &angle){$/;"	f	class:ChNXT
getJointAngleAbs	mobot.cpp	/^int CMobot::getJointAngleAbs(robotJointId_t id, double &angle)$/;"	f	class:CMobot
getJointAngle_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int getJointAngle_chdl(void *varg) {$/;"	f
getJointAngle_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int getJointAngle_chdl(void *varg) {$/;"	f
getJointAngles	mobot.cpp	/^int CMobot::getJointAngles($/;"	f	class:CMobot
getJointAngles	mobot_new.cpp	/^int CMobot::getJointAngles($/;"	f	class:CMobot
getJointAnglesAbs	mobot.cpp	/^int CMobot::getJointAnglesAbs($/;"	f	class:CMobot
getJointDirection	mobot.cpp	/^int CMobot::getJointDirection(robotJointId_t id, robotJointState_t &dir)$/;"	f	class:CMobot
getJointDirection	mobot_new.cpp	/^int CMobot::getJointDirection(mobotJointId_t id, mobotJointState_t &dir)$/;"	f	class:CMobot
getJointMaxSpeed	mobot.cpp	/^int CMobot::getJointMaxSpeed(robotJointId_t id, double &maxSpeed)$/;"	f	class:CMobot
getJointMaxSpeed	mobot_new.cpp	/^int CMobot::getJointMaxSpeed(mobotJointId_t id, double &maxSpeed)$/;"	f	class:CMobot
getJointSafetyAngle	mobot.cpp	/^int CMobot::getJointSafetyAngle(double &angle)$/;"	f	class:CMobot
getJointSafetyAngle	mobot_new.cpp	/^int CMobot::getJointSafetyAngle(double &angle)$/;"	f	class:CMobot
getJointSafetyAngleTimeout	mobot.cpp	/^int CMobot::getJointSafetyAngleTimeout(double &seconds)$/;"	f	class:CMobot
getJointSafetyAngleTimeout	mobot_new.cpp	/^int CMobot::getJointSafetyAngleTimeout(double &seconds)$/;"	f	class:CMobot
getJointSpeed	mobot.cpp	/^int CMobot::getJointSpeed(robotJointId_t id, double &speed)$/;"	f	class:CMobot
getJointSpeed	mobot_new.cpp	/^int CMobot::getJointSpeed(mobotJointId_t id, double &speed)$/;"	f	class:CMobot
getJointSpeedRatio	chnxt/chnxt.c	/^int ChNXT::getJointSpeedRatio(nxtJointId_t id, double *ratio) {$/;"	f	class:ChNXT
getJointSpeedRatio	mobot.cpp	/^int CMobot::getJointSpeedRatio(robotJointId_t id, double &ratio)$/;"	f	class:CMobot
getJointSpeedRatio	mobot_new.cpp	/^int CMobot::getJointSpeedRatio(mobotJointId_t id, double &ratio)$/;"	f	class:CMobot
getJointSpeedRatio	nxt.cpp	/^int ChNXT::getJointSpeedRatio(nxtJointId_t id, double &ratio){$/;"	f	class:ChNXT
getJointSpeedRatio_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int getJointSpeedRatio_chdl(void *varg) {$/;"	f
getJointSpeedRatio_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int getJointSpeedRatio_chdl(void *varg) {$/;"	f
getJointSpeedRatios	chnxt/chnxt.c	/^int getJointSpeedRatios(double *ratio1, double *ratio2, double *ratio3) {$/;"	f
getJointSpeedRatios	mobot.cpp	/^int CMobot::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3, double &ratio4)$/;"	f	class:CMobot
getJointSpeedRatios	mobot_new.cpp	/^int CMobot::getJointSpeedRatios(double &ratio1, double &ratio2, double &ratio3, double &ratio4)$/;"	f	class:CMobot
getJointSpeedRatios	nxt.cpp	/^int ChNXT::getJointSpeedRatios(double &ratio1, double &ratio2,$/;"	f	class:ChNXT
getJointSpeedRatios_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int getJointSpeedRatios_chdl(void *varg) {$/;"	f
getJointSpeedRatios_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int getJointSpeedRatios_chdl(void *varg) {$/;"	f
getJointSpeeds	mobot.cpp	/^int CMobot::getJointSpeeds(double &speed1, double &speed2, double &speed3, double &speed4)$/;"	f	class:CMobot
getJointSpeeds	mobot_new.cpp	/^int CMobot::getJointSpeeds(double &speed1, double &speed2, double &speed3, double &speed4)$/;"	f	class:CMobot
getJointState	mobot.cpp	/^int CMobot::getJointState(robotJointId_t id, robotJointState_t &state)$/;"	f	class:CMobot
getJointState	mobot_new.cpp	/^int CMobot::getJointState(mobotJointId_t id, mobotJointState_t &state)$/;"	f	class:CMobot
getJointState	nxt.cpp	/^int ChNXT::getJointState(nxtJointId_t id, int &status){$/;"	f	class:ChNXT
getJointState_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int getJointState_chdl(void *varg) {$/;"	f
getJointState_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int getJointState_chdl(void *varg) {$/;"	f
getJointStates_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int getJointStates_chdl(void *varg) {$/;"	f
getMobot	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^CRecordMobot* RobotManager::getMobot(int connectIndex)$/;"	f	class:RobotManager
getMobotObject	mobot_new.cpp	/^mobot_t* CMobot::getMobotObject()$/;"	f	class:CMobot
getMotion	demos/iMobotController_Windows/iMobotController_Windows/gait.cpp	/^const Motion* Gait::getMotion(int index)$/;"	f	class:Gait
getMotionName	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^const TCHAR* CRecordMobot::getMotionName(int index)$/;"	f	class:CRecordMobot
getMotionString	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::getMotionString(int index, TCHAR* buf)$/;"	f	class:CRecordMobot
getMotionType	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::getMotionType(int index)$/;"	f	class:CRecordMobot
getMotorMask	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  inline unsigned char getMotorMask() const {return _motor_mask;}$/;"	f	class:Motion
getName	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  inline const WCHAR* getName() {return _name;}$/;"	f	class:Gait
getName	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^  inline const char* getName() {return _name;}$/;"	f	class:Gait
getNumMotions	demos/iMobotController_Windows/iMobotController_Windows/gait.cpp	/^int Gait::getNumMotions()$/;"	f	class:Gait
getOutputState	nxt.cpp	/^int ChNXT::getOutputState(nxtJointId_t id){$/;"	f	class:ChNXT
getRobotManager	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^RobotManager* CTeachingDialog::getRobotManager()$/;"	f	class:CTeachingDialog
getSensor	nxt.cpp	/^int ChNXT::getSensor(nxtSensorId_t id, int &value) {$/;"	f	class:ChNXT
getSensor_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int getSensor_chdl(void *varg) {$/;"	f
getSensor_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int getSensor_chdl(void *varg) {$/;"	f
getType	demos/iMobotController_Windows/iMobotController_Windows/gait.cpp	/^enum motion_type_e Motion::getType() const$/;"	f	class:Motion
getUltrasonic	nxt.cpp	/^int ChNXT::getUltrasonic(nxtSensorId_t id) {$/;"	f	class:ChNXT
get_in_addr	mobot_new.cpp	/^void *get_in_addr(struct sockaddr *sa)$/;"	f
hSerial	mobot_internal.h	/^  HANDLE hSerial;$/;"	m	struct:br_comms_s
hSerial	nxt_internal.h	/^  HANDLE hSerial;$/;"	m	struct:br_comms_s
haltPlayFlag	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	int haltPlayFlag; \/* If this flag is enabled, the current $/;"	m	class:CTeachingDialog
handlerFunc	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	void (CiMobotController_WindowsDlg::*handlerFunc)(void);$/;"	m	struct:comboBoxState_s
handlerFunc	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  void (CiMobotController_WindowsDlg::*handlerFunc)(void);$/;"	m	struct:buttonState_s
humanoidMotionWait	nxt.cpp	/^int ChNXT::humanoidMotionWait(void)$/;"	f	class:ChNXT
humanoidMotionWait_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int humanoidMotionWait_chdl(void *varg) {$/;"	f
humanoidWalkBackward	nxt.cpp	/^int ChNXT::humanoidWalkBackward(double angle)$/;"	f	class:ChNXT
humanoidWalkBackwardNB	nxt.cpp	/^int ChNXT::humanoidWalkBackwardNB(double angle)$/;"	f	class:ChNXT
humanoidWalkBackwardNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int humanoidWalkBackwardNB_chdl(void *varg) {$/;"	f
humanoidWalkBackward_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int humanoidWalkBackward_chdl(void *varg) {$/;"	f
humanoidWalkForward	nxt.cpp	/^int ChNXT::humanoidWalkForward(double angle)$/;"	f	class:ChNXT
humanoidWalkForwardNB	nxt.cpp	/^int ChNXT::humanoidWalkForwardNB(double angle)$/;"	f	class:ChNXT
humanoidWalkForwardNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int humanoidWalkForwardNB_chdl(void *varg) {$/;"	f
humanoidWalkForward_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int humanoidWalkForward_chdl(void *varg) {$/;"	f
iBlockCount	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int iBlockCount[3];$/;"	m	class:ChNXT
iBlockCount	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int iBlockCount[3];$/;"	m	class:ChNXT
iBlockCount	nxt.h	/^        int iBlockCount[3];$/;"	m	class:ChNXT
iMobotComms	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CMobot iMobotComms;$/;"	m	class:CiMobotController_WindowsDlg
iRotationCount	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int iRotationCount[3];$/;"	m	class:ChNXT
iRotationCount	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int iRotationCount[3];$/;"	m	class:ChNXT
iRotationCount	nxt.h	/^        int iRotationCount[3];$/;"	m	class:ChNXT
iRunState	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int iRunState[3];$/;"	m	class:ChNXT
iRunState	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int iRunState[3];$/;"	m	class:ChNXT
iRunState	nxt.h	/^        int iRunState[3];$/;"	m	class:ChNXT
iTachoCount	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int iTachoCount[3];$/;"	m	class:ChNXT
iTachoCount	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int iTachoCount[3];$/;"	m	class:ChNXT
iTachoCount	nxt.h	/^        int iTachoCount[3];$/;"	m	class:ChNXT
iTachoLimit	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int iTachoLimit[3];$/;"	m	class:ChNXT
iTachoLimit	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int iTachoLimit[3];$/;"	m	class:ChNXT
iTachoLimit	nxt.h	/^        int iTachoLimit[3];$/;"	m	class:ChNXT
i_sensorMode	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int i_sensorMode[4];$/;"	m	class:ChNXT
i_sensorMode	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int i_sensorMode[4];$/;"	m	class:ChNXT
i_sensorMode	nxt.h	/^        int i_sensorMode[4];$/;"	m	class:ChNXT
i_sensorType	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int i_sensorType[4];$/;"	m	class:ChNXT
i_sensorType	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int i_sensorType[4];$/;"	m	class:ChNXT
i_sensorType	nxt.h	/^        int i_sensorType[4];$/;"	m	class:ChNXT
id	mobot.h	/^  robotJointId_t id;$/;"	m	struct:recordAngleArg_s
initInput	nxt.cpp	/^int ChNXT::initInput(nxtSensorId_t id) {$/;"	f	class:ChNXT
isConnected	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	bool isConnected;$/;"	m	class:CiMobotController_WindowsDlg
isConnected	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^bool RobotManager::isConnected(int index) {$/;"	f	class:RobotManager
isConnected	mobot.cpp	/^int CMobot::isConnected()$/;"	f	class:CMobot
isConnected	mobot_new.cpp	/^int CMobot::isConnected()$/;"	f	class:CMobot
isConnected	nxt.cpp	/^int ChNXT::isConnected(void){$/;"	f	class:ChNXT
isConnected_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int isConnected_chdl(void *varg) {$/;"	f
isConnected_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int isConnected_chdl(void *varg) {$/;"	f
isJointMoving	nxt.cpp	/^int ChNXT::isJointMoving(nxtJointId_t id){$/;"	f	class:ChNXT
isJointMoving_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int isJointMoving_chdl(void *varg) {$/;"	f
isJointMoving_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int isJointMoving_chdl(void *varg) {$/;"	f
isMoving	mobot.cpp	/^int CMobot::isMoving()$/;"	f	class:CMobot
isMoving	mobot.cpp	/^int CMobotGroup::isMoving()$/;"	f	class:CMobotGroup
isMoving	mobot_new.cpp	/^int CMobot::isMoving()$/;"	f	class:CMobot
isMoving	mobot_new.cpp	/^int CMobotGroup::isMoving()$/;"	f	class:CMobotGroup
isMoving	nxt.cpp	/^int ChNXT::isMoving(){$/;"	f	class:ChNXT
isMoving_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int isMoving_chdl(void *varg) {$/;"	f
isMoving_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int isMoving_chdl(void *varg) {$/;"	f
isPlaying	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^  int isPlaying;$/;"	m	class:CTeachingDialog
jointSafetyAngle	nxt_internal.h	/^  double jointSafetyAngle[3];$/;"	m	struct:br_comms_s
jointSpeed	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int jointSpeed[3];$/;"	m	class:ChNXT
jointSpeed	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int jointSpeed[3];$/;"	m	class:ChNXT
jointSpeed	nxt.h	/^        int jointSpeed[3];$/;"	m	class:ChNXT
jointSpeedRatio	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        double jointSpeedRatio[3];$/;"	m	class:ChNXT
jointSpeedRatio	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        double jointSpeedRatio[3];$/;"	m	class:ChNXT
jointSpeedRatio	nxt.h	/^        double jointSpeedRatio[3];$/;"	m	class:ChNXT
jointSpeedRatios	nxt_internal.h	/^  double jointSpeedRatios[3];$/;"	m	struct:br_comms_s
jointSpeeds	mobot_internal.h	/^  double jointSpeeds[4];$/;"	m	struct:br_comms_s
jointSpeeds	nxt_internal.h	/^  double jointSpeeds[4];$/;"	m	struct:br_comms_s
listctrl_availableBots	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	CListCtrl listctrl_availableBots;$/;"	m	class:CTeachingDialog
listctrl_connectedBots	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	CListCtrl listctrl_connectedBots;$/;"	m	class:CTeachingDialog
listctrl_recordedMotions	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.h	/^	CListCtrlCtx listctrl_recordedMotions;$/;"	m	class:CTeachingDialog
m_botton_moveArmDown	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CButton m_botton_moveArmDown;$/;"	m	class:CiMobotController_WindowsDlg
m_botton_moveArmUp	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CButton m_botton_moveArmUp;$/;"	m	class:CiMobotController_WindowsDlg
m_botton_moveStop	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CButton m_botton_moveStop;$/;"	m	class:CiMobotController_WindowsDlg
m_botton_rotateArmLeft	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CButton m_botton_rotateArmLeft;$/;"	m	class:CiMobotController_WindowsDlg
m_botton_rotateArmRight	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CButton m_botton_rotateArmRight;$/;"	m	class:CiMobotController_WindowsDlg
m_button_Motor1Backward	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_Motor1Backward;$/;"	m	class:CiMobotController_WindowsDlg
m_button_Motor1Forward	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_Motor1Forward;$/;"	m	class:CiMobotController_WindowsDlg
m_button_Motor1Stop	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_Motor1Stop;$/;"	m	class:CiMobotController_WindowsDlg
m_button_Motor2Backward	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_Motor2Backward;$/;"	m	class:CiMobotController_WindowsDlg
m_button_Motor2Forward	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_Motor2Forward;$/;"	m	class:CiMobotController_WindowsDlg
m_button_Motor2Stop	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_Motor2Stop;$/;"	m	class:CiMobotController_WindowsDlg
m_button_Motor3Backward	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_Motor3Backward;$/;"	m	class:CiMobotController_WindowsDlg
m_button_Motor3Forward	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_Motor3Forward;$/;"	m	class:CiMobotController_WindowsDlg
m_button_Motor3Stop	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_Motor3Stop;$/;"	m	class:CiMobotController_WindowsDlg
m_button_rollBack	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_rollBack;$/;"	m	class:CiMobotController_WindowsDlg
m_button_rollForward	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_rollForward;$/;"	m	class:CiMobotController_WindowsDlg
m_button_rollLeft	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_rollLeft;$/;"	m	class:CiMobotController_WindowsDlg
m_button_rollRight	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_rollRight;$/;"	m	class:CiMobotController_WindowsDlg
m_button_rollStop	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CButton m_button_rollStop;$/;"	m	class:CiMobotController_WindowsDlg
m_button_walkBackward	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CButton m_button_walkBackward;$/;"	m	class:CiMobotController_WindowsDlg
m_button_walkForward	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CButton m_button_walkForward;$/;"	m	class:CiMobotController_WindowsDlg
m_button_walkStop	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CButton m_button_walkStop;$/;"	m	class:CiMobotController_WindowsDlg
m_clawStatus	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  int m_clawStatus;   \/\/ Store last known claw status$/;"	m	class:CiMobotController_WindowsDlg
m_combo_Sensor1type	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CComboBox m_combo_Sensor1type;$/;"	m	class:CiMobotController_WindowsDlg
m_combo_Sensor2type	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CComboBox m_combo_Sensor2type;$/;"	m	class:CiMobotController_WindowsDlg
m_combo_Sensor3type	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CComboBox m_combo_Sensor3type;$/;"	m	class:CiMobotController_WindowsDlg
m_combo_Sensor4type	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CComboBox m_combo_Sensor4type;$/;"	m	class:CiMobotController_WindowsDlg
m_combo_SensorTypes	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CComboBox *m_combo_SensorTypes[4];$/;"	m	class:CiMobotController_WindowsDlg
m_edit_Address	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_Address;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_Channel	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_Channel;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_Motor1Position	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_Motor1Position;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_Motor2Position	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_Motor2Position;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_Motor3Position	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_Motor3Position;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_MotorPositions	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit *m_edit_MotorPositions[4];$/;"	m	class:CiMobotController_WindowsDlg
m_edit_MotorSpeed1	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_MotorSpeed1;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_MotorSpeed2	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_MotorSpeed2;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_MotorSpeed3	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_MotorSpeed3;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_MotorSpeeds	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit *m_edit_MotorSpeeds[4];$/;"	m	class:CiMobotController_WindowsDlg
m_edit_Sensor1value	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CEdit m_edit_Sensor1value;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_Sensor2value	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CEdit m_edit_Sensor2value;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_Sensor3value	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CEdit m_edit_Sensor3value;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_Sensor4value	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CEdit m_edit_Sensor4value;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_SensorValues	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CEdit *m_edit_SensorValues[4];$/;"	m	class:CiMobotController_WindowsDlg
m_edit_setpos1	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_setpos1;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_setpos2	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_setpos2;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_setpos3	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CEdit m_edit_setpos3;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_setspd1	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CEdit m_edit_setspd1;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_setspd2	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CEdit m_edit_setspd2;$/;"	m	class:CiMobotController_WindowsDlg
m_edit_setspd3	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  CEdit m_edit_setspd3;$/;"	m	class:CiMobotController_WindowsDlg
m_gaits	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	Gait* m_gaits[50];$/;"	m	class:CiMobotController_WindowsDlg
m_hIcon	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	HICON m_hIcon;$/;"	m	class:CiMobotController_WindowsDlg
m_list_gaits	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CListBox m_list_gaits;$/;"	m	class:CiMobotController_WindowsDlg
m_numGaits	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	int m_numGaits;$/;"	m	class:CiMobotController_WindowsDlg
m_positions	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  int m_positions[4]; \/\/ Store last known slider position$/;"	m	class:CiMobotController_WindowsDlg
m_slider_Position1	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CSliderCtrl m_slider_Position1;$/;"	m	class:CiMobotController_WindowsDlg
m_slider_Position2	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CSliderCtrl m_slider_Position2;$/;"	m	class:CiMobotController_WindowsDlg
m_slider_Position3	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CSliderCtrl m_slider_Position3;$/;"	m	class:CiMobotController_WindowsDlg
m_slider_Positions	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CSliderCtrl *m_slider_Positions[4];$/;"	m	class:CiMobotController_WindowsDlg
m_slider_Speed1	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CSliderCtrl m_slider_Speed1;$/;"	m	class:CiMobotController_WindowsDlg
m_slider_Speed2	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CSliderCtrl m_slider_Speed2;$/;"	m	class:CiMobotController_WindowsDlg
m_slider_Speed3	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CSliderCtrl m_slider_Speed3;$/;"	m	class:CiMobotController_WindowsDlg
m_slider_Speeds	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CSliderCtrl *m_slider_Speeds[4];$/;"	m	class:CiMobotController_WindowsDlg
m_speedRatios	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  double m_speedRatios[3]; \/\/ Store last known slider position$/;"	m	class:CiMobotController_WindowsDlg
m_speeds	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^  int m_speeds[4];    \/\/ Store last known slider position$/;"	m	class:CiMobotController_WindowsDlg
m_staticicon_iMobotPicture	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	CStatic m_staticicon_iMobotPicture;$/;"	m	class:CiMobotController_WindowsDlg
main	test.cpp	/^int main(){$/;"	f
maxSpeed	mobot_internal.h	/^  double maxSpeed[4];$/;"	m	struct:br_comms_s
maxSpeed	nxt_internal.h	/^  double maxSpeed[4];$/;"	m	struct:br_comms_s
mobot	mobot_internal.h	/^  void* mobot;$/;"	m	struct:br_comms_s
mobot_joints_e	mobot_internal.h	/^typedef enum mobot_joints_e {$/;"	g
mobot_joints_e	nxt_internal.h	/^typedef enum mobot_joints_e {$/;"	g
mobot_motor_direction_e	mobot_internal.h	/^typedef enum mobot_motor_direction_e$/;"	g
mobot_motor_direction_e	nxt_internal.h	/^typedef enum mobot_motor_direction_e$/;"	g
motionArch	mobot.cpp	/^int CMobot::motionArch(double angle)$/;"	f	class:CMobot
motionArch	mobot.cpp	/^int CMobotGroup::motionArch(double angle) {$/;"	f	class:CMobotGroup
motionArch	mobot_new.cpp	/^int CMobot::motionArch(double angle)$/;"	f	class:CMobot
motionArch	mobot_new.cpp	/^int CMobotGroup::motionArch(double angle) {$/;"	f	class:CMobotGroup
motionArchNB	mobot.cpp	/^int CMobot::motionArchNB(double angle)$/;"	f	class:CMobot
motionArchNB	mobot.cpp	/^int CMobotGroup::motionArchNB(double angle) {$/;"	f	class:CMobotGroup
motionArchNB	mobot_new.cpp	/^int CMobot::motionArchNB(double angle)$/;"	f	class:CMobot
motionArchNB	mobot_new.cpp	/^int CMobotGroup::motionArchNB(double angle) {$/;"	f	class:CMobotGroup
motionArchThread	mobot.cpp	/^void* CMobotGroup::motionArchThread(void* arg) $/;"	f	class:CMobotGroup
motionArchThread	mobot.cpp	/^void* motionArchThread(void* arg)$/;"	f
motionArchThread	mobot_new.cpp	/^void* CMobotGroup::motionArchThread(void* arg) $/;"	f	class:CMobotGroup
motionArchThread	mobot_new.cpp	/^void* motionArchThread(void* arg)$/;"	f
motionArgDouble	mobot_internal.h	/^  double motionArgDouble;$/;"	m	struct:br_comms_s
motionArgDouble	nxt_internal.h	/^  double motionArgDouble;$/;"	m	struct:br_comms_s
motionArgInt	mobot_internal.h	/^  int motionArgInt;$/;"	m	struct:br_comms_s
motionArgInt	nxt_internal.h	/^  int motionArgInt;$/;"	m	struct:br_comms_s
motionInProgress	mobot_internal.h	/^  int motionInProgress;$/;"	m	struct:br_comms_s
motionInProgress	nxt_internal.h	/^  int motionInProgress;$/;"	m	struct:br_comms_s
motionInchwormLeft	mobot.cpp	/^int CMobot::motionInchwormLeft(int num)$/;"	f	class:CMobot
motionInchwormLeft	mobot.cpp	/^int CMobotGroup::motionInchwormLeft(int num)$/;"	f	class:CMobotGroup
motionInchwormLeft	mobot_new.cpp	/^int CMobot::motionInchwormLeft(int num)$/;"	f	class:CMobot
motionInchwormLeft	mobot_new.cpp	/^int CMobotGroup::motionInchwormLeft(int num)$/;"	f	class:CMobotGroup
motionInchwormLeftNB	mobot.cpp	/^int CMobot::motionInchwormLeftNB(int num)$/;"	f	class:CMobot
motionInchwormLeftNB	mobot.cpp	/^int CMobotGroup::motionInchwormLeftNB(int num)$/;"	f	class:CMobotGroup
motionInchwormLeftNB	mobot_new.cpp	/^int CMobot::motionInchwormLeftNB(int num)$/;"	f	class:CMobot
motionInchwormLeftNB	mobot_new.cpp	/^int CMobotGroup::motionInchwormLeftNB(int num)$/;"	f	class:CMobotGroup
motionInchwormLeftThread	mobot.cpp	/^void* CMobotGroup::motionInchwormLeftThread(void* arg)$/;"	f	class:CMobotGroup
motionInchwormLeftThread	mobot.cpp	/^void* motionInchwormLeftThread(void* arg)$/;"	f
motionInchwormLeftThread	mobot_new.cpp	/^void* CMobotGroup::motionInchwormLeftThread(void* arg)$/;"	f	class:CMobotGroup
motionInchwormLeftThread	mobot_new.cpp	/^void* motionInchwormLeftThread(void* arg)$/;"	f
motionInchwormRight	mobot.cpp	/^int CMobot::motionInchwormRight(int num)$/;"	f	class:CMobot
motionInchwormRight	mobot.cpp	/^int CMobotGroup::motionInchwormRight(int num)$/;"	f	class:CMobotGroup
motionInchwormRight	mobot_new.cpp	/^int CMobot::motionInchwormRight(int num)$/;"	f	class:CMobot
motionInchwormRight	mobot_new.cpp	/^int CMobotGroup::motionInchwormRight(int num)$/;"	f	class:CMobotGroup
motionInchwormRightNB	mobot.cpp	/^int CMobot::motionInchwormRightNB(int num)$/;"	f	class:CMobot
motionInchwormRightNB	mobot.cpp	/^int CMobotGroup::motionInchwormRightNB(int num)$/;"	f	class:CMobotGroup
motionInchwormRightNB	mobot_new.cpp	/^int CMobot::motionInchwormRightNB(int num)$/;"	f	class:CMobot
motionInchwormRightNB	mobot_new.cpp	/^int CMobotGroup::motionInchwormRightNB(int num)$/;"	f	class:CMobotGroup
motionInchwormRightThread	mobot.cpp	/^void* CMobotGroup::motionInchwormRightThread(void* arg)$/;"	f	class:CMobotGroup
motionInchwormRightThread	mobot.cpp	/^void* motionInchwormRightThread(void* arg)$/;"	f
motionInchwormRightThread	mobot_new.cpp	/^void* CMobotGroup::motionInchwormRightThread(void* arg)$/;"	f	class:CMobotGroup
motionInchwormRightThread	mobot_new.cpp	/^void* motionInchwormRightThread(void* arg)$/;"	f
motionMoveBackward	nxt.cpp	/^int ChNXT::motionMoveBackward(void){$/;"	f	class:ChNXT
motionMoveForward	nxt.cpp	/^int ChNXT::motionMoveForward(void){$/;"	f	class:ChNXT
motionRollBackward	mobot.cpp	/^int CMobot::motionRollBackward(double angle)$/;"	f	class:CMobot
motionRollBackward	mobot.cpp	/^int CMobotGroup::motionRollBackward(double angle)$/;"	f	class:CMobotGroup
motionRollBackward	mobot_new.cpp	/^int CMobot::motionRollBackward(double angle)$/;"	f	class:CMobot
motionRollBackward	mobot_new.cpp	/^int CMobotGroup::motionRollBackward(double angle)$/;"	f	class:CMobotGroup
motionRollBackwardNB	mobot.cpp	/^int CMobot::motionRollBackwardNB(double angle)$/;"	f	class:CMobot
motionRollBackwardNB	mobot.cpp	/^int CMobotGroup::motionRollBackwardNB(double angle)$/;"	f	class:CMobotGroup
motionRollBackwardNB	mobot_new.cpp	/^int CMobot::motionRollBackwardNB(double angle)$/;"	f	class:CMobot
motionRollBackwardNB	mobot_new.cpp	/^int CMobotGroup::motionRollBackwardNB(double angle)$/;"	f	class:CMobotGroup
motionRollBackwardThread	mobot.cpp	/^void* CMobotGroup::motionRollBackwardThread(void* arg)$/;"	f	class:CMobotGroup
motionRollBackwardThread	mobot.cpp	/^void* motionRollBackwardThread(void* arg)$/;"	f
motionRollBackwardThread	mobot_new.cpp	/^void* CMobotGroup::motionRollBackwardThread(void* arg)$/;"	f	class:CMobotGroup
motionRollBackwardThread	mobot_new.cpp	/^void* motionRollBackwardThread(void* arg)$/;"	f
motionRollForward	mobot.cpp	/^int CMobot::motionRollForward(double angle)$/;"	f	class:CMobot
motionRollForward	mobot.cpp	/^int CMobotGroup::motionRollForward(double angle)$/;"	f	class:CMobotGroup
motionRollForward	mobot_new.cpp	/^int CMobot::motionRollForward(double angle)$/;"	f	class:CMobot
motionRollForward	mobot_new.cpp	/^int CMobotGroup::motionRollForward(double angle)$/;"	f	class:CMobotGroup
motionRollForwardNB	mobot.cpp	/^int CMobot::motionRollForwardNB(double angle)$/;"	f	class:CMobot
motionRollForwardNB	mobot.cpp	/^int CMobotGroup::motionRollForwardNB(double angle)$/;"	f	class:CMobotGroup
motionRollForwardNB	mobot_new.cpp	/^int CMobot::motionRollForwardNB(double angle)$/;"	f	class:CMobot
motionRollForwardNB	mobot_new.cpp	/^int CMobotGroup::motionRollForwardNB(double angle)$/;"	f	class:CMobotGroup
motionRollForwardThread	mobot.cpp	/^void* CMobotGroup::motionRollForwardThread(void* arg)$/;"	f	class:CMobotGroup
motionRollForwardThread	mobot.cpp	/^void* motionRollForwardThread(void* arg)$/;"	f
motionRollForwardThread	mobot_new.cpp	/^void* CMobotGroup::motionRollForwardThread(void* arg)$/;"	f	class:CMobotGroup
motionRollForwardThread	mobot_new.cpp	/^void* motionRollForwardThread(void* arg)$/;"	f
motionRotateLeft	nxt.cpp	/^int ChNXT::motionRotateLeft(void){$/;"	f	class:ChNXT
motionRotateRight	nxt.cpp	/^int ChNXT::motionRotateRight(void){$/;"	f	class:ChNXT
motionSkinny	mobot.cpp	/^int CMobot::motionSkinny(double angle)$/;"	f	class:CMobot
motionSkinny	mobot.cpp	/^int CMobotGroup::motionSkinny(double angle)$/;"	f	class:CMobotGroup
motionSkinny	mobot_new.cpp	/^int CMobot::motionSkinny(double angle)$/;"	f	class:CMobot
motionSkinny	mobot_new.cpp	/^int CMobotGroup::motionSkinny(double angle)$/;"	f	class:CMobotGroup
motionSkinnyNB	mobot.cpp	/^int CMobot::motionSkinnyNB(double angle)$/;"	f	class:CMobot
motionSkinnyNB	mobot.cpp	/^int CMobotGroup::motionSkinnyNB(double angle)$/;"	f	class:CMobotGroup
motionSkinnyNB	mobot_new.cpp	/^int CMobot::motionSkinnyNB(double angle)$/;"	f	class:CMobot
motionSkinnyNB	mobot_new.cpp	/^int CMobotGroup::motionSkinnyNB(double angle)$/;"	f	class:CMobotGroup
motionSkinnyThread	mobot.cpp	/^void* CMobotGroup::motionSkinnyThread(void* arg)$/;"	f	class:CMobotGroup
motionSkinnyThread	mobot.cpp	/^void* motionSkinnyThread(void* arg)$/;"	f
motionSkinnyThread	mobot_new.cpp	/^void* CMobotGroup::motionSkinnyThread(void* arg)$/;"	f	class:CMobotGroup
motionSkinnyThread	mobot_new.cpp	/^void* motionSkinnyThread(void* arg)$/;"	f
motionStand	mobot.cpp	/^int CMobot::motionStand()$/;"	f	class:CMobot
motionStand	mobot.cpp	/^int CMobotGroup::motionStand()$/;"	f	class:CMobotGroup
motionStand	mobot_new.cpp	/^int CMobot::motionStand()$/;"	f	class:CMobot
motionStand	mobot_new.cpp	/^int CMobotGroup::motionStand()$/;"	f	class:CMobotGroup
motionStandNB	mobot.cpp	/^int CMobot::motionStandNB()$/;"	f	class:CMobot
motionStandNB	mobot.cpp	/^int CMobotGroup::motionStandNB()$/;"	f	class:CMobotGroup
motionStandNB	mobot_new.cpp	/^int CMobot::motionStandNB()$/;"	f	class:CMobot
motionStandNB	mobot_new.cpp	/^int CMobotGroup::motionStandNB()$/;"	f	class:CMobotGroup
motionStandThread	mobot.cpp	/^void* CMobotGroup::motionStandThread(void* arg)$/;"	f	class:CMobotGroup
motionStandThread	mobot.cpp	/^void* motionStandThread(void* arg)$/;"	f
motionStandThread	mobot_new.cpp	/^void* CMobotGroup::motionStandThread(void* arg)$/;"	f	class:CMobotGroup
motionStandThread	mobot_new.cpp	/^void* motionStandThread(void* arg)$/;"	f
motionTumbleLeft	mobot.cpp	/^int CMobot::motionTumbleLeft(int num)$/;"	f	class:CMobot
motionTumbleLeft	mobot.cpp	/^int CMobotGroup::motionTumbleLeft(int num)$/;"	f	class:CMobotGroup
motionTumbleLeft	mobot_new.cpp	/^int CMobot::motionTumbleLeft(int num)$/;"	f	class:CMobot
motionTumbleLeft	mobot_new.cpp	/^int CMobotGroup::motionTumbleLeft(int num)$/;"	f	class:CMobotGroup
motionTumbleLeftNB	mobot.cpp	/^int CMobot::motionTumbleLeftNB(int num)$/;"	f	class:CMobot
motionTumbleLeftNB	mobot.cpp	/^int CMobotGroup::motionTumbleLeftNB(int num)$/;"	f	class:CMobotGroup
motionTumbleLeftNB	mobot_new.cpp	/^int CMobot::motionTumbleLeftNB(int num)$/;"	f	class:CMobot
motionTumbleLeftNB	mobot_new.cpp	/^int CMobotGroup::motionTumbleLeftNB(int num)$/;"	f	class:CMobotGroup
motionTumbleLeftThread	mobot.cpp	/^void* CMobotGroup::motionTumbleLeftThread(void* arg)$/;"	f	class:CMobotGroup
motionTumbleLeftThread	mobot.cpp	/^void* motionTumbleLeftThread(void* arg)$/;"	f
motionTumbleLeftThread	mobot_new.cpp	/^void* CMobotGroup::motionTumbleLeftThread(void* arg)$/;"	f	class:CMobotGroup
motionTumbleLeftThread	mobot_new.cpp	/^void* motionTumbleLeftThread(void* arg)$/;"	f
motionTumbleRight	mobot.cpp	/^int CMobot::motionTumbleRight(int num)$/;"	f	class:CMobot
motionTumbleRight	mobot.cpp	/^int CMobotGroup::motionTumbleRight(int num)$/;"	f	class:CMobotGroup
motionTumbleRight	mobot_new.cpp	/^int CMobot::motionTumbleRight(int num)$/;"	f	class:CMobot
motionTumbleRight	mobot_new.cpp	/^int CMobotGroup::motionTumbleRight(int num)$/;"	f	class:CMobotGroup
motionTumbleRightNB	mobot.cpp	/^int CMobot::motionTumbleRightNB(int num)$/;"	f	class:CMobot
motionTumbleRightNB	mobot.cpp	/^int CMobotGroup::motionTumbleRightNB(int num)$/;"	f	class:CMobotGroup
motionTumbleRightNB	mobot_new.cpp	/^int CMobot::motionTumbleRightNB(int num)$/;"	f	class:CMobot
motionTumbleRightNB	mobot_new.cpp	/^int CMobotGroup::motionTumbleRightNB(int num)$/;"	f	class:CMobotGroup
motionTumbleRightThread	mobot.cpp	/^void* CMobotGroup::motionTumbleRightThread(void* arg)$/;"	f	class:CMobotGroup
motionTumbleRightThread	mobot.cpp	/^void* motionTumbleRightThread(void* arg)$/;"	f
motionTumbleRightThread	mobot_new.cpp	/^void* CMobotGroup::motionTumbleRightThread(void* arg)$/;"	f	class:CMobotGroup
motionTumbleRightThread	mobot_new.cpp	/^void* motionTumbleRightThread(void* arg)$/;"	f
motionTurnLeft	mobot.cpp	/^int CMobot::motionTurnLeft(double angle)$/;"	f	class:CMobot
motionTurnLeft	mobot.cpp	/^int CMobotGroup::motionTurnLeft(double angle)$/;"	f	class:CMobotGroup
motionTurnLeft	mobot_new.cpp	/^int CMobot::motionTurnLeft(double angle)$/;"	f	class:CMobot
motionTurnLeft	mobot_new.cpp	/^int CMobotGroup::motionTurnLeft(double angle)$/;"	f	class:CMobotGroup
motionTurnLeft	nxt.cpp	/^int ChNXT::motionTurnLeft(void){$/;"	f	class:ChNXT
motionTurnLeftNB	mobot.cpp	/^int CMobot::motionTurnLeftNB(double angle)$/;"	f	class:CMobot
motionTurnLeftNB	mobot.cpp	/^int CMobotGroup::motionTurnLeftNB(double angle)$/;"	f	class:CMobotGroup
motionTurnLeftNB	mobot_new.cpp	/^int CMobot::motionTurnLeftNB(double angle)$/;"	f	class:CMobot
motionTurnLeftNB	mobot_new.cpp	/^int CMobotGroup::motionTurnLeftNB(double angle)$/;"	f	class:CMobotGroup
motionTurnLeftThread	mobot.cpp	/^void* CMobotGroup::motionTurnLeftThread(void* arg)$/;"	f	class:CMobotGroup
motionTurnLeftThread	mobot.cpp	/^void* motionTurnLeftThread(void* arg)$/;"	f
motionTurnLeftThread	mobot_new.cpp	/^void* CMobotGroup::motionTurnLeftThread(void* arg)$/;"	f	class:CMobotGroup
motionTurnLeftThread	mobot_new.cpp	/^void* motionTurnLeftThread(void* arg)$/;"	f
motionTurnRight	mobot.cpp	/^int CMobot::motionTurnRight(double angle)$/;"	f	class:CMobot
motionTurnRight	mobot.cpp	/^int CMobotGroup::motionTurnRight(double angle)$/;"	f	class:CMobotGroup
motionTurnRight	mobot_new.cpp	/^int CMobot::motionTurnRight(double angle)$/;"	f	class:CMobot
motionTurnRight	mobot_new.cpp	/^int CMobotGroup::motionTurnRight(double angle)$/;"	f	class:CMobotGroup
motionTurnRight	nxt.cpp	/^int ChNXT::motionTurnRight(void){$/;"	f	class:ChNXT
motionTurnRightNB	mobot.cpp	/^int CMobot::motionTurnRightNB(double angle)$/;"	f	class:CMobot
motionTurnRightNB	mobot.cpp	/^int CMobotGroup::motionTurnRightNB(double angle)$/;"	f	class:CMobotGroup
motionTurnRightNB	mobot_new.cpp	/^int CMobot::motionTurnRightNB(double angle)$/;"	f	class:CMobot
motionTurnRightNB	mobot_new.cpp	/^int CMobotGroup::motionTurnRightNB(double angle)$/;"	f	class:CMobotGroup
motionTurnRightThread	mobot.cpp	/^void* CMobotGroup::motionTurnRightThread(void* arg)$/;"	f	class:CMobotGroup
motionTurnRightThread	mobot.cpp	/^void* motionTurnRightThread(void* arg)$/;"	f
motionTurnRightThread	mobot_new.cpp	/^void* CMobotGroup::motionTurnRightThread(void* arg)$/;"	f	class:CMobotGroup
motionTurnRightThread	mobot_new.cpp	/^void* motionTurnRightThread(void* arg)$/;"	f
motionType	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	enum motionType_e motionType;$/;"	m	struct:motion_s	typeref:enum:motion_s::motionType_e
motionType_e	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^enum motionType_e$/;"	g
motionUnstand	mobot.cpp	/^int CMobot::motionUnstand()$/;"	f	class:CMobot
motionUnstand	mobot.cpp	/^int CMobotGroup::motionUnstand()$/;"	f	class:CMobotGroup
motionUnstand	mobot_new.cpp	/^int CMobot::motionUnstand()$/;"	f	class:CMobot
motionUnstand	mobot_new.cpp	/^int CMobotGroup::motionUnstand()$/;"	f	class:CMobotGroup
motionUnstandNB	mobot.cpp	/^int CMobot::motionUnstandNB()$/;"	f	class:CMobot
motionUnstandNB	mobot.cpp	/^int CMobotGroup::motionUnstandNB()$/;"	f	class:CMobotGroup
motionUnstandNB	mobot_new.cpp	/^int CMobot::motionUnstandNB()$/;"	f	class:CMobot
motionUnstandNB	mobot_new.cpp	/^int CMobotGroup::motionUnstandNB()$/;"	f	class:CMobotGroup
motionUnstandThread	mobot.cpp	/^void* CMobotGroup::motionUnstandThread(void* arg)$/;"	f	class:CMobotGroup
motionUnstandThread	mobot.cpp	/^void* motionUnstandThread(void* arg)$/;"	f
motionUnstandThread	mobot_new.cpp	/^void* CMobotGroup::motionUnstandThread(void* arg)$/;"	f	class:CMobotGroup
motionUnstandThread	mobot_new.cpp	/^void* motionUnstandThread(void* arg)$/;"	f
motionWait	mobot.cpp	/^int CMobot::motionWait()$/;"	f	class:CMobot
motionWait	mobot.cpp	/^int CMobotGroup::motionWait()$/;"	f	class:CMobotGroup
motionWait	mobot_new.cpp	/^int CMobot::motionWait()$/;"	f	class:CMobot
motionWait	mobot_new.cpp	/^int CMobotGroup::motionWait()$/;"	f	class:CMobotGroup
motion_s	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^struct motion_s$/;"	s
motion_type_e	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^typedef enum motion_type_e {$/;"	g
motion_type_t	demos/iMobotController_Windows/iMobotController_Windows/gait.h	/^} motion_type_t;$/;"	t	typeref:enum:motion_type_e
motorDirection_t	mobot_internal.h	/^} motorDirection_t;$/;"	t	typeref:enum:mobot_motor_direction_e
motorDirection_t	nxt_internal.h	/^} motorDirection_t;$/;"	t	typeref:enum:mobot_motor_direction_e
motorOn	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int motorOn[3];$/;"	m	class:ChNXT
motorOn	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int motorOn[3];$/;"	m	class:ChNXT
motorOn	nxt.h	/^        int motorOn[3];$/;"	m	class:ChNXT
motorPosCum	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        double motorPosCum[3];$/;"	m	class:ChNXT
motorPosCum	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        double motorPosCum[3];$/;"	m	class:ChNXT
motorPosCum	nxt.h	/^        double motorPosCum[3];$/;"	m	class:ChNXT
motorPosRaw	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        double motorPosRaw[3];$/;"	m	class:ChNXT
motorPosRaw	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        double motorPosRaw[3];$/;"	m	class:ChNXT
motorPosRaw	nxt.h	/^        double motorPosRaw[3];$/;"	m	class:ChNXT
move	mobot.cpp	/^int CMobot::move( double angle1,$/;"	f	class:CMobot
move	mobot.cpp	/^int CMobotGroup::move(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
move	mobot_new.cpp	/^int CMobot::move( double angle1,$/;"	f	class:CMobot
move	mobot_new.cpp	/^int CMobotGroup::move(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
move	nxt.cpp	/^int ChNXT::move(double angle1, double angle2, double angle3){$/;"	f	class:ChNXT
moveContinuousNB	mobot.cpp	/^int CMobot::moveContinuousNB( robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3, robotJointState_t dir4)$/;"	f	class:CMobot
moveContinuousNB	mobot.cpp	/^int CMobotGroup::moveContinuousNB(robotJointState_t dir1, $/;"	f	class:CMobotGroup
moveContinuousNB	mobot_new.cpp	/^int CMobot::moveContinuousNB( mobotJointState_t dir1, mobotJointState_t dir2, mobotJointState_t dir3, mobotJointState_t dir4)$/;"	f	class:CMobot
moveContinuousNB	mobot_new.cpp	/^int CMobotGroup::moveContinuousNB(mobotJointState_t dir1, $/;"	f	class:CMobotGroup
moveContinuousNB	nxt.cpp	/^int ChNXT::moveContinuousNB(nxtJointState_t dir1,$/;"	f	class:ChNXT
moveContinuousNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveContinuousNB_chdl(void *varg) {$/;"	f
moveContinuousNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveContinuousNB_chdl(void *varg) {$/;"	f
moveContinuousTime	mobot.cpp	/^int CMobot::moveContinuousTime( robotJointState_t dir1, robotJointState_t dir2, robotJointState_t dir3, robotJointState_t dir4, double seconds)$/;"	f	class:CMobot
moveContinuousTime	mobot.cpp	/^int CMobotGroup::moveContinuousTime(robotJointState_t dir1, $/;"	f	class:CMobotGroup
moveContinuousTime	mobot_new.cpp	/^int CMobot::moveContinuousTime( mobotJointState_t dir1, mobotJointState_t dir2, mobotJointState_t dir3, mobotJointState_t dir4, double seconds)$/;"	f	class:CMobot
moveContinuousTime	mobot_new.cpp	/^int CMobotGroup::moveContinuousTime(mobotJointState_t dir1, $/;"	f	class:CMobotGroup
moveContinuousTime	nxt.cpp	/^int ChNXT::moveContinuousTime(nxtJointState_t dir1,$/;"	f	class:ChNXT
moveContinuousTime_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveContinuousTime_chdl(void *varg) {$/;"	f
moveContinuousTime_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveContinuousTime_chdl(void *varg) {$/;"	f
moveDown	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^int RobotManager::moveDown(int connectIndex) {$/;"	f	class:RobotManager
moveEntryDown	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^int ConfigFile::moveEntryDown(int index)$/;"	f	class:ConfigFile
moveEntryUp	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^int ConfigFile::moveEntryUp(int index)$/;"	f	class:ConfigFile
moveJoint	mobot.cpp	/^int CMobot::moveJoint(robotJointId_t id, double angle)$/;"	f	class:CMobot
moveJoint	mobot_new.cpp	/^int CMobot::moveJoint(mobotJointId_t id, double angle)$/;"	f	class:CMobot
moveJoint	nxt.cpp	/^int ChNXT::moveJoint(nxtJointId_t id, double angle){$/;"	f	class:ChNXT
moveJointContinuousNB	mobot.cpp	/^int CMobot::moveJointContinuousNB(robotJointId_t id, robotJointState_t dir)$/;"	f	class:CMobot
moveJointContinuousNB	mobot.cpp	/^int CMobotGroup::moveJointContinuousNB(robotJointId_t id, robotJointState_t dir)$/;"	f	class:CMobotGroup
moveJointContinuousNB	mobot_new.cpp	/^int CMobot::moveJointContinuousNB(mobotJointId_t id, mobotJointState_t dir)$/;"	f	class:CMobot
moveJointContinuousNB	mobot_new.cpp	/^int CMobotGroup::moveJointContinuousNB(mobotJointId_t id, mobotJointState_t dir)$/;"	f	class:CMobotGroup
moveJointContinuousNB	nxt.cpp	/^int ChNXT::moveJointContinuousNB( nxtJointId_t id, nxtJointState_t dir ){$/;"	f	class:ChNXT
moveJointContinuousNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveJointContinuousNB_chdl(void *varg) {$/;"	f
moveJointContinuousNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveJointContinuousNB_chdl(void *varg) {$/;"	f
moveJointContinuousTime	mobot.cpp	/^int CMobot::moveJointContinuousTime(robotJointId_t id, robotJointState_t dir, double seconds)$/;"	f	class:CMobot
moveJointContinuousTime	mobot.cpp	/^int CMobotGroup::moveJointContinuousTime(robotJointId_t id, robotJointState_t dir, double seconds)$/;"	f	class:CMobotGroup
moveJointContinuousTime	mobot_new.cpp	/^int CMobot::moveJointContinuousTime(mobotJointId_t id, mobotJointState_t dir, double seconds)$/;"	f	class:CMobot
moveJointContinuousTime	mobot_new.cpp	/^int CMobotGroup::moveJointContinuousTime(mobotJointId_t id, mobotJointState_t dir, double seconds)$/;"	f	class:CMobotGroup
moveJointNB	mobot.cpp	/^int CMobot::moveJointNB(robotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointNB	mobot_new.cpp	/^int CMobot::moveJointNB(mobotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointNB	nxt.cpp	/^int ChNXT::moveJointNB(nxtJointId_t id, double angle) {$/;"	f	class:ChNXT
moveJointNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveJointNB_chdl(void *varg) {$/;"	f
moveJointNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveJointNB_chdl(void *varg) {$/;"	f
moveJointTo	mobot.cpp	/^int CMobot::moveJointTo(robotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointTo	mobot.cpp	/^int CMobotGroup::moveJointTo(robotJointId_t id, double angle)$/;"	f	class:CMobotGroup
moveJointTo	mobot_new.cpp	/^int CMobot::moveJointTo(mobotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointTo	mobot_new.cpp	/^int CMobotGroup::moveJointTo(mobotJointId_t id, double angle)$/;"	f	class:CMobotGroup
moveJointTo	nxt.cpp	/^int ChNXT::moveJointTo(nxtJointId_t id, double angle){$/;"	f	class:ChNXT
moveJointToAbs	mobot.cpp	/^int CMobot::moveJointToAbs(robotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointToAbsNB	mobot.cpp	/^int CMobot::moveJointToAbsNB(robotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointToDirect	mobot.cpp	/^int CMobot::moveJointToDirect(robotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointToDirect	mobot_new.cpp	/^int CMobot::moveJointToDirect(mobotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointToDirect	mobot_new.cpp	/^int CMobotGroup::moveJointToDirect(mobotJointId_t id, double angle)$/;"	f	class:CMobotGroup
moveJointToDirectNB	mobot.cpp	/^int CMobot::moveJointToDirectNB(robotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointToDirectNB	mobot_new.cpp	/^int CMobot::moveJointToDirectNB(mobotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointToDirectNB	mobot_new.cpp	/^int CMobotGroup::moveJointToDirectNB(mobotJointId_t id, double angle)$/;"	f	class:CMobotGroup
moveJointToNB	mobot.cpp	/^int CMobot::moveJointToNB(robotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointToNB	mobot.cpp	/^int CMobotGroup::moveJointToNB(robotJointId_t id, double angle)$/;"	f	class:CMobotGroup
moveJointToNB	mobot_new.cpp	/^int CMobot::moveJointToNB(mobotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointToNB	mobot_new.cpp	/^int CMobotGroup::moveJointToNB(mobotJointId_t id, double angle)$/;"	f	class:CMobotGroup
moveJointToNB	nxt.cpp	/^int ChNXT::moveJointToNB(nxtJointId_t id, double angle){$/;"	f	class:ChNXT
moveJointToNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveJointToNB_chdl(void *varg) {$/;"	f
moveJointToNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveJointToNB_chdl(void *varg) {$/;"	f
moveJointToPIDNB	mobot.cpp	/^int CMobot::moveJointToPIDNB(robotJointId_t id, double angle)$/;"	f	class:CMobot
moveJointTo_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveJointTo_chdl(void *varg) {$/;"	f
moveJointTo_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveJointTo_chdl(void *varg) {$/;"	f
moveJointWait	mobot.cpp	/^int CMobot::moveJointWait(robotJointId_t id)$/;"	f	class:CMobot
moveJointWait	mobot.cpp	/^int CMobotGroup::moveJointWait(robotJointId_t id)$/;"	f	class:CMobotGroup
moveJointWait	mobot_new.cpp	/^int CMobot::moveJointWait(mobotJointId_t id)$/;"	f	class:CMobot
moveJointWait	mobot_new.cpp	/^int CMobotGroup::moveJointWait(mobotJointId_t id)$/;"	f	class:CMobotGroup
moveJointWait	nxt.cpp	/^int ChNXT::moveJointWait(nxtJointId_t id){$/;"	f	class:ChNXT
moveJointWait_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveJointWait_chdl(void *varg) {$/;"	f
moveJointWait_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveJointWait_chdl(void *varg) {$/;"	f
moveJoint_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveJoint_chdl(void *varg) {$/;"	f
moveJoint_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveJoint_chdl(void *varg) {$/;"	f
moveMotion	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::moveMotion(int fromindex, int toindex)$/;"	f	class:CRecordMobot
moveNB	mobot.cpp	/^int CMobot::moveNB( double angle1,$/;"	f	class:CMobot
moveNB	mobot.cpp	/^int CMobotGroup::moveNB(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
moveNB	mobot_new.cpp	/^int CMobot::moveNB( double angle1,$/;"	f	class:CMobot
moveNB	mobot_new.cpp	/^int CMobotGroup::moveNB(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
moveNB	nxt.cpp	/^int ChNXT::moveNB(double angle1, double angle2, double angle3){$/;"	f	class:ChNXT
moveNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveNB_chdl(void *varg) {$/;"	f
moveNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveNB_chdl(void *varg) {$/;"	f
moveTo	mobot.cpp	/^int CMobot::moveTo( double angle1,$/;"	f	class:CMobot
moveTo	mobot.cpp	/^int CMobotGroup::moveTo(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
moveTo	mobot_new.cpp	/^int CMobot::moveTo( double angle1,$/;"	f	class:CMobot
moveTo	mobot_new.cpp	/^int CMobotGroup::moveTo(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
moveTo	nxt.cpp	/^int ChNXT::moveTo(double angle1, double angle2, double angle3){$/;"	f	class:ChNXT
moveToAbs	mobot.cpp	/^int CMobot::moveToAbs( double angle1,$/;"	f	class:CMobot
moveToAbsNB	mobot.cpp	/^int CMobot::moveToAbsNB( double angle1,$/;"	f	class:CMobot
moveToDirect	mobot.cpp	/^int CMobot::moveToDirect( double angle1,$/;"	f	class:CMobot
moveToDirect	mobot_new.cpp	/^int CMobot::moveToDirect( double angle1,$/;"	f	class:CMobot
moveToDirect	mobot_new.cpp	/^int CMobotGroup::moveToDirect(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
moveToDirectNB	mobot.cpp	/^int CMobot::moveToDirectNB( double angle1,$/;"	f	class:CMobot
moveToDirectNB	mobot_new.cpp	/^int CMobot::moveToDirectNB( double angle1,$/;"	f	class:CMobot
moveToDirectNB	mobot_new.cpp	/^int CMobotGroup::moveToDirectNB(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
moveToNB	mobot.cpp	/^int CMobot::moveToNB( double angle1,$/;"	f	class:CMobot
moveToNB	mobot.cpp	/^int CMobotGroup::moveToNB(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
moveToNB	mobot_new.cpp	/^int CMobot::moveToNB( double angle1,$/;"	f	class:CMobot
moveToNB	mobot_new.cpp	/^int CMobotGroup::moveToNB(double angle1, double angle2, double angle3, double angle4)$/;"	f	class:CMobotGroup
moveToNB	nxt.cpp	/^int ChNXT::moveToNB(double angle1, double angle2, double angle3){$/;"	f	class:ChNXT
moveToNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveToNB_chdl(void *varg) {$/;"	f
moveToNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveToNB_chdl(void *varg) {$/;"	f
moveToZero	mobot.cpp	/^int CMobot::moveToZero()$/;"	f	class:CMobot
moveToZero	mobot.cpp	/^int CMobotGroup::moveToZero()$/;"	f	class:CMobotGroup
moveToZero	mobot_new.cpp	/^int CMobot::moveToZero()$/;"	f	class:CMobot
moveToZero	mobot_new.cpp	/^int CMobotGroup::moveToZero()$/;"	f	class:CMobotGroup
moveToZero	nxt.cpp	/^int ChNXT::moveToZero(void){$/;"	f	class:ChNXT
moveToZeroNB	mobot.cpp	/^int CMobot::moveToZeroNB()$/;"	f	class:CMobot
moveToZeroNB	mobot.cpp	/^int CMobotGroup::moveToZeroNB()$/;"	f	class:CMobotGroup
moveToZeroNB	mobot_new.cpp	/^int CMobot::moveToZeroNB()$/;"	f	class:CMobot
moveToZeroNB	mobot_new.cpp	/^int CMobotGroup::moveToZeroNB()$/;"	f	class:CMobotGroup
moveToZeroNB	nxt.cpp	/^int ChNXT::moveToZeroNB(void){$/;"	f	class:ChNXT
moveToZeroNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveToZeroNB_chdl(void *varg) {$/;"	f
moveToZeroNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveToZeroNB_chdl(void *varg) {$/;"	f
moveToZero_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveToZero_chdl(void *varg) {$/;"	f
moveToZero_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveToZero_chdl(void *varg) {$/;"	f
moveTo_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveTo_chdl(void *varg) {$/;"	f
moveTo_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveTo_chdl(void *varg) {$/;"	f
moveUp	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^int RobotManager::moveUp(int connectIndex) {$/;"	f	class:RobotManager
moveWait	mobot.cpp	/^int CMobot::moveWait()$/;"	f	class:CMobot
moveWait	mobot.cpp	/^int CMobotGroup::moveWait()$/;"	f	class:CMobotGroup
moveWait	mobot_new.cpp	/^int CMobot::moveWait()$/;"	f	class:CMobot
moveWait	mobot_new.cpp	/^int CMobotGroup::moveWait()$/;"	f	class:CMobotGroup
moveWait	nxt.cpp	/^int ChNXT::moveWait(){$/;"	f	class:ChNXT
moveWait_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int moveWait_chdl(void *varg) {$/;"	f
moveWait_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int moveWait_chdl(void *varg) {$/;"	f
move_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int move_chdl(void *varg) {$/;"	f
move_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int move_chdl(void *varg) {$/;"	f
msecs	mobot.h	/^  int msecs;$/;"	m	struct:recordAngleArg_s
name	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^	TCHAR* name;$/;"	m	struct:motion_s
new	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_Windows.cpp	9;"	d	file:
new	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.cpp	13;"	d	file:
nullThread	mobot.cpp	/^void* nullThread(void* arg)$/;"	f
nullThread	mobot_new.cpp	/^void* nullThread(void* arg)$/;"	f
num	mobot.h	/^  int num;$/;"	m	struct:recordAngleArg_s
numAvailable	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^int RobotManager::numAvailable()$/;"	f	class:RobotManager
numConnected	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^int RobotManager::numConnected()$/;"	f	class:RobotManager
numEntries	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^int ConfigFile::numEntries()$/;"	f	class:ConfigFile
numMotions	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::numMotions()$/;"	f	class:CRecordMobot
nxt	nxt_internal.h	/^  void* nxt;$/;"	m	struct:br_comms_s
nxtComms	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_WindowsDlg.h	/^	ChNXT nxtComms;$/;"	m	class:CiMobotController_WindowsDlg
nxtJointId_t	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^} nxtJointId_t;$/;"	t	typeref:enum:nxt_joints_e
nxtJointId_t	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^} nxtJointId_t;$/;"	t	typeref:enum:nxt_joints_e
nxtJointId_t	nxt.h	/^} nxtJointId_t;$/;"	t	typeref:enum:nxt_joints_e
nxtJointState_t	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^} nxtJointState_t;$/;"	t	typeref:enum:nxt_joint_state_e
nxtJointState_t	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^} nxtJointState_t;$/;"	t	typeref:enum:nxt_joint_state_e
nxtJointState_t	nxt.h	/^} nxtJointState_t;$/;"	t	typeref:enum:nxt_joint_state_e
nxtSensorId_t	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^} nxtSensorId_t;$/;"	t	typeref:enum:nxt_sensors_e
nxtSensorId_t	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^} nxtSensorId_t;$/;"	t	typeref:enum:nxt_sensors_e
nxtSensorId_t	nxt.h	/^} nxtSensorId_t;$/;"	t	typeref:enum:nxt_sensors_e
nxtSensorMode_t	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^} nxtSensorMode_t;$/;"	t	typeref:enum:nxt_sensor_mode_e
nxtSensorMode_t	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^} nxtSensorMode_t;$/;"	t	typeref:enum:nxt_sensor_mode_e
nxtSensorMode_t	nxt.h	/^} nxtSensorMode_t;$/;"	t	typeref:enum:nxt_sensor_mode_e
nxtSensorType_t	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^} nxtSensorType_t;$/;"	t	typeref:enum:nxt_sensor_type_e
nxtSensorType_t	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^} nxtSensorType_t;$/;"	t	typeref:enum:nxt_sensor_type_e
nxtSensorType_t	nxt.h	/^} nxtSensorType_t;$/;"	t	typeref:enum:nxt_sensor_type_e
nxt_joint_state_e	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^typedef enum nxt_joint_state_e{$/;"	g
nxt_joint_state_e	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^typedef enum nxt_joint_state_e{$/;"	g
nxt_joint_state_e	nxt.h	/^typedef enum nxt_joint_state_e{$/;"	g
nxt_joints_e	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^typedef enum nxt_joints_e{$/;"	g
nxt_joints_e	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^typedef enum nxt_joints_e{$/;"	g
nxt_joints_e	nxt.h	/^typedef enum nxt_joints_e{$/;"	g
nxt_sensor_mode_e	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^typedef enum nxt_sensor_mode_e{$/;"	g
nxt_sensor_mode_e	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^typedef enum nxt_sensor_mode_e{$/;"	g
nxt_sensor_mode_e	nxt.h	/^typedef enum nxt_sensor_mode_e{$/;"	g
nxt_sensor_type_e	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^typedef enum nxt_sensor_type_e{$/;"	g
nxt_sensor_type_e	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^typedef enum nxt_sensor_type_e{$/;"	g
nxt_sensor_type_e	nxt.h	/^typedef enum nxt_sensor_type_e{$/;"	g
nxt_sensors_e	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^typedef enum nxt_sensors_e{$/;"	g
nxt_sensors_e	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^typedef enum nxt_sensors_e{$/;"	g
nxt_sensors_e	nxt.h	/^typedef enum nxt_sensors_e{$/;"	g
operator =	demos/iMobotController_Windows/iMobotController_Windows/gait.cpp	/^Motion & Motion::operator= (const Motion &rhs)$/;"	f	class:Motion
play	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::play(int index)$/;"	f	class:CRecordMobot
playThread	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void* playThread(void* arg)$/;"	f
playTone	nxt.cpp	/^int ChNXT::playTone(int freq, int duration){$/;"	f	class:ChNXT
pollInput	nxt.cpp	/^int ChNXT::pollInput(nxtSensorId_t id) {$/;"	f	class:ChNXT
pos	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^		double pos[4];$/;"	m	union:motion_s::data_u
printMess	nxt.cpp	/^int ChNXT::printMess(){$/;"	f	class:ChNXT
protocol_commands_e	commands.h	/^enum protocol_commands_e {$/;"	g
rad2deg	mobot.cpp	/^double rad2deg(double rad)$/;"	f
rad2deg	mobot_new.cpp	/^double rad2deg(double rad)$/;"	f
read	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^int ConfigFile::read(const char* path)$/;"	f	class:ConfigFile
record	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::record(void)$/;"	f	class:CRecordMobot
recordAngle	mobot.cpp	/^int CMobot::recordAngle(robotJointId_t id, double* time, double* angle, int num, double seconds)$/;"	f	class:CMobot
recordAngle	mobot_new.cpp	/^int CMobot::recordAngle(mobotJointId_t id, double* time, double* angle, int num, double seconds)$/;"	f	class:CMobot
recordAngleArg_s	mobot.h	/^typedef struct recordAngleArg_s $/;"	s
recordAngleArg_t	mobot.h	/^} recordAngleArg_t;$/;"	t	typeref:struct:recordAngleArg_s
recordAngleBegin	mobot_new.cpp	/^int CMobot::recordAngleBegin(mobotJointId_t id, double* &time, double* &angle, double seconds)$/;"	f	class:CMobot
recordAngleEnd	mobot_new.cpp	/^int CMobot::recordAngleEnd(mobotJointId_t id, int &num)$/;"	f	class:CMobot
recordAngles	mobot.cpp	/^int CMobot::recordAngles(double *time, $/;"	f	class:CMobot
recordAngles	mobot_new.cpp	/^int CMobot::recordAngles(double *time, $/;"	f	class:CMobot
recordAnglesBegin	mobot_new.cpp	/^int CMobot::recordAnglesBegin(double* &time, $/;"	f	class:CMobot
recordAnglesEnd	mobot_new.cpp	/^int CMobot::recordAnglesEnd(int &num)$/;"	f	class:CMobot
recordAnglesThread	mobot.cpp	/^void* recordAnglesThread(void* arg)$/;"	f
recordAnglesThread	mobot_new.cpp	/^void* recordAnglesThread(void* arg)$/;"	f
recordWait	mobot.cpp	/^int CMobot::recordWait()$/;"	f	class:CMobot
recordWait	mobot_new.cpp	/^int CMobot::recordWait()$/;"	f	class:CMobot
recordingInProgress	mobot_internal.h	/^  int recordingInProgress[4];$/;"	m	struct:br_comms_s
recordingInProgress	nxt_internal.h	/^  int recordingInProgress[4];$/;"	m	struct:br_comms_s
recvBuf	mobot_internal.h	/^  uint8_t recvBuf[64];$/;"	m	struct:br_comms_s
recvBuf	nxt_internal.h	/^  uint8_t recvBuf[64];$/;"	m	struct:br_comms_s
recvBuf_bytes	mobot_internal.h	/^  int recvBuf_bytes;$/;"	m	struct:br_comms_s
recvBuf_bytes	nxt_internal.h	/^  int recvBuf_bytes;$/;"	m	struct:br_comms_s
recvBuf_cond	mobot_internal.h	/^  COND_T*  recvBuf_cond;$/;"	m	struct:br_comms_s
recvBuf_cond	nxt_internal.h	/^  COND_T*  recvBuf_cond;$/;"	m	struct:br_comms_s
recvBuf_lock	mobot_internal.h	/^  MUTEX_T* recvBuf_lock;$/;"	m	struct:br_comms_s
recvBuf_lock	nxt_internal.h	/^  MUTEX_T* recvBuf_lock;$/;"	m	struct:br_comms_s
recvBuf_ready	mobot_internal.h	/^  int recvBuf_ready;$/;"	m	struct:br_comms_s
recvBuf_ready	nxt_internal.h	/^  int recvBuf_ready;$/;"	m	struct:br_comms_s
recvMessage	nxt.cpp	/^int ChNXT::recvMessage(int length) {$/;"	f	class:ChNXT
recvMsg	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        char recvMsg[256];$/;"	m	class:ChNXT
recvMsg	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        char recvMsg[256];$/;"	m	class:ChNXT
recvMsg	nxt.h	/^        char recvMsg[256];$/;"	m	class:ChNXT
refresh	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::refresh()$/;"	f	class:CTeachingDialog
refreshRecordedMotions	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^void CTeachingDialog::refreshRecordedMotions(int highlightedIndex)$/;"	f	class:CTeachingDialog
remove	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^int ConfigFile::remove(int index)$/;"	f	class:ConfigFile
removeMotion	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::removeMotion(int index, bool releaseData)$/;"	f	class:CRecordMobot
reset	mobot_new.cpp	/^int CMobot::reset()$/;"	f	class:CMobot
reset	mobot_new.cpp	/^int CMobotGroup::reset()$/;"	f	class:CMobotGroup
resetToZero	mobot_new.cpp	/^int CMobot::resetToZero()$/;"	f	class:CMobot
resetToZero	mobot_new.cpp	/^int CMobotGroup::resetToZero()$/;"	f	class:CMobotGroup
resetToZeroNB	mobot_new.cpp	/^int CMobot::resetToZeroNB()$/;"	f	class:CMobot
resetToZeroNB	mobot_new.cpp	/^int CMobotGroup::resetToZeroNB()$/;"	f	class:CMobotGroup
robotJointId_t	mobot.h	/^} robotJointId_t;$/;"	t	typeref:enum:robotJoints_e
robotJointId_t	mobot_internal.h	/^} robotJointId_t;$/;"	t	typeref:enum:mobot_joints_e
robotJointId_t	nxt_internal.h	/^} robotJointId_t;$/;"	t	typeref:enum:mobot_joints_e
robotJointState_e	mobot.h	/^typedef enum robotJointState_e$/;"	g
robotJointState_e	mobot_internal.h	/^typedef enum robotJointState_e$/;"	g
robotJointState_e	nxt_internal.h	/^typedef enum robotJointState_e$/;"	g
robotJointState_t	mobot.h	/^} robotJointState_t;$/;"	t	typeref:enum:robotJointState_e
robotJointState_t	mobot_internal.h	/^} robotJointState_t;$/;"	t	typeref:enum:robotJointState_e
robotJointState_t	nxt_internal.h	/^} robotJointState_t;$/;"	t	typeref:enum:robotJointState_e
robotJoints_e	mobot.h	/^typedef enum robotJoints_e {$/;"	g
runDirection	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int runDirection[3];$/;"	m	class:ChNXT
runDirection	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int runDirection[3];$/;"	m	class:ChNXT
runDirection	nxt.h	/^        int runDirection[3];$/;"	m	class:ChNXT
sendMessage	nxt.cpp	/^int ChNXT::sendMessage(int length) {$/;"	f	class:ChNXT
sendMsg	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        char sendMsg[256];$/;"	m	class:ChNXT
sendMsg	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        char sendMsg[256];$/;"	m	class:ChNXT
sendMsg	nxt.h	/^        char sendMsg[256];$/;"	m	class:ChNXT
sensorMode	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int sensorMode[4];$/;"	m	class:ChNXT
sensorMode	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int sensorMode[4];$/;"	m	class:ChNXT
sensorMode	nxt.h	/^        int sensorMode[4];$/;"	m	class:ChNXT
sensorOn	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int sensorOn[4];$/;"	m	class:ChNXT
sensorOn	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int sensorOn[4];$/;"	m	class:ChNXT
sensorOn	nxt.h	/^        int sensorOn[4];$/;"	m	class:ChNXT
sensorType	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int sensorType[4];$/;"	m	class:ChNXT
sensorType	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int sensorType[4];$/;"	m	class:ChNXT
sensorType	nxt.h	/^        int sensorType[4];$/;"	m	class:ChNXT
sensorValCalib	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int sensorValCalib[4];$/;"	m	class:ChNXT
sensorValCalib	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int sensorValCalib[4];$/;"	m	class:ChNXT
sensorValCalib	nxt.h	/^        int sensorValCalib[4];$/;"	m	class:ChNXT
sensorValNorm	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int sensorValNorm[4];$/;"	m	class:ChNXT
sensorValNorm	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int sensorValNorm[4];$/;"	m	class:ChNXT
sensorValNorm	nxt.h	/^        int sensorValNorm[4];$/;"	m	class:ChNXT
sensorValRaw	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int sensorValRaw[4];$/;"	m	class:ChNXT
sensorValRaw	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int sensorValRaw[4];$/;"	m	class:ChNXT
sensorValRaw	nxt.h	/^        int sensorValRaw[4];$/;"	m	class:ChNXT
sensorValScaled	chnxt/chnxt-1.0.7/chnxt/include/nxt.h	/^        int sensorValScaled[4];$/;"	m	class:ChNXT
sensorValScaled	chnxt/chnxt-2.0.0/chnxt/include/nxt.h	/^        int sensorValScaled[4];$/;"	m	class:ChNXT
sensorValScaled	nxt.h	/^        int sensorValScaled[4];$/;"	m	class:ChNXT
setConnected	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^void RobotManager::setConnected(int index, bool connected)$/;"	f	class:RobotManager
setContextMenuCallback	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlCtx.cpp	/^void CListCtrlCtx::setContextMenuCallback(void (*callback)(CPoint point, void* arg), void* arg) {$/;"	f	class:CListCtrlCtx
setJointDirection	mobot.cpp	/^int CMobot::setJointDirection(robotJointId_t id, robotJointState_t dir)$/;"	f	class:CMobot
setJointDirection	mobot_new.cpp	/^int CMobot::setJointDirection(mobotJointId_t id, mobotJointState_t dir)$/;"	f	class:CMobot
setJointRelativeZero	nxt.cpp	/^int ChNXT::setJointRelativeZero(nxtJointId_t id){$/;"	f	class:ChNXT
setJointRelativeZeros	nxt.cpp	/^int ChNXT::setJointRelativeZeros(void){$/;"	f	class:ChNXT
setJointSafetyAngle	mobot.cpp	/^int CMobot::setJointSafetyAngle(double angle)$/;"	f	class:CMobot
setJointSafetyAngle	mobot_new.cpp	/^int CMobot::setJointSafetyAngle(double angle)$/;"	f	class:CMobot
setJointSafetyAngleTimeout	mobot.cpp	/^int CMobot::setJointSafetyAngleTimeout(double seconds)$/;"	f	class:CMobot
setJointSafetyAngleTimeout	mobot_new.cpp	/^int CMobot::setJointSafetyAngleTimeout(double seconds)$/;"	f	class:CMobot
setJointSpeed	mobot.cpp	/^int CMobot::setJointSpeed(robotJointId_t id, double speed)$/;"	f	class:CMobot
setJointSpeed	mobot.cpp	/^int CMobotGroup::setJointSpeed(robotJointId_t id, double speed)$/;"	f	class:CMobotGroup
setJointSpeed	mobot_new.cpp	/^int CMobot::setJointSpeed(mobotJointId_t id, double speed)$/;"	f	class:CMobot
setJointSpeed	mobot_new.cpp	/^int CMobotGroup::setJointSpeed(mobotJointId_t id, double speed)$/;"	f	class:CMobotGroup
setJointSpeed	nxt.cpp	/^int ChNXT::setJointSpeed(nxtJointId_t joint, int speed){$/;"	f	class:ChNXT
setJointSpeedRatio	mobot.cpp	/^int CMobot::setJointSpeedRatio(robotJointId_t id, double ratio)$/;"	f	class:CMobot
setJointSpeedRatio	mobot.cpp	/^int CMobotGroup::setJointSpeedRatio(robotJointId_t id, double ratio)$/;"	f	class:CMobotGroup
setJointSpeedRatio	mobot_new.cpp	/^int CMobot::setJointSpeedRatio(mobotJointId_t id, double ratio)$/;"	f	class:CMobot
setJointSpeedRatio	mobot_new.cpp	/^int CMobotGroup::setJointSpeedRatio(mobotJointId_t id, double ratio)$/;"	f	class:CMobotGroup
setJointSpeedRatio	nxt.cpp	/^int ChNXT::setJointSpeedRatio(nxtJointId_t id, double ratio){$/;"	f	class:ChNXT
setJointSpeedRatio_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int setJointSpeedRatio_chdl(void *varg) {$/;"	f
setJointSpeedRatio_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int setJointSpeedRatio_chdl(void *varg) {$/;"	f
setJointSpeedRatios	mobot.cpp	/^int CMobot::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4)$/;"	f	class:CMobot
setJointSpeedRatios	mobot.cpp	/^int CMobotGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4)$/;"	f	class:CMobotGroup
setJointSpeedRatios	mobot_new.cpp	/^int CMobot::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4)$/;"	f	class:CMobot
setJointSpeedRatios	mobot_new.cpp	/^int CMobotGroup::setJointSpeedRatios(double ratio1, double ratio2, double ratio3, double ratio4)$/;"	f	class:CMobotGroup
setJointSpeedRatios	nxt.cpp	/^int ChNXT::setJointSpeedRatios(double ratio1, double ratio2,$/;"	f	class:ChNXT
setJointSpeedRatios_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int setJointSpeedRatios_chdl(void *varg) {$/;"	f
setJointSpeedRatios_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int setJointSpeedRatios_chdl(void *varg) {$/;"	f
setJointSpeeds	mobot.cpp	/^int CMobot::setJointSpeeds(double speed1, double speed2, double speed3, double speed4)$/;"	f	class:CMobot
setJointSpeeds	mobot.cpp	/^int CMobotGroup::setJointSpeeds(double speed1, double speed2, double speed3, double speed4)$/;"	f	class:CMobotGroup
setJointSpeeds	mobot_new.cpp	/^int CMobot::setJointSpeeds(double speed1, double speed2, double speed3, double speed4)$/;"	f	class:CMobot
setJointSpeeds	mobot_new.cpp	/^int CMobotGroup::setJointSpeeds(double speed1, double speed2, double speed3, double speed4)$/;"	f	class:CMobotGroup
setJointSpeeds	nxt.cpp	/^int ChNXT::setJointSpeeds(int speed1, int speed2, int speed3){$/;"	f	class:ChNXT
setJointToZero	nxt.cpp	/^int ChNXT::setJointToZero(nxtJointId_t id){$/;"	f	class:ChNXT
setJointToZero_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int setJointToZero_chdl(void *varg) {$/;"	f
setJointZero_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int setJointZero_chdl(void *varg) {$/;"	f
setJointZeros	nxt.cpp	/^int ChNXT::setJointZeros(void){$/;"	f	class:ChNXT
setJointZeros_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int setJointZeros_chdl(void *varg) {$/;"	f
setJointZeros_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int setJointZeros_chdl(void *varg) {$/;"	f
setMotionName	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^int CRecordMobot::setMotionName(int index, const TCHAR* name)$/;"	f	class:CRecordMobot
setMotorPower	mobot.cpp	/^int CMobot::setMotorPower(robotJointId_t id, int power)$/;"	f	class:CMobot
setMotorPower	mobot_new.cpp	/^int CMobot::setMotorPower(mobotJointId_t id, int power)$/;"	f	class:CMobot
setSensor	nxt.cpp	/^int ChNXT::setSensor(nxtSensorId_t id, $/;"	f	class:ChNXT
setSensor_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int setSensor_chdl(void *varg) {$/;"	f
setSensor_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int setSensor_chdl(void *varg) {$/;"	f
setToZeros	nxt.cpp	/^int ChNXT::setToZeros(void){$/;"	f	class:ChNXT
setToZeros_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int setToZeros_chdl(void *varg) {$/;"	f
setTwoWheelRobotSpeed	mobot.cpp	/^int CMobot::setTwoWheelRobotSpeed(double speed, double radius)$/;"	f	class:CMobot
setTwoWheelRobotSpeed	mobot.cpp	/^int CMobotGroup::setTwoWheelRobotSpeed(double speed, double radius)$/;"	f	class:CMobotGroup
setTwoWheelRobotSpeed	mobot_new.cpp	/^int CMobot::setTwoWheelRobotSpeed(double speed, double radius)$/;"	f	class:CMobot
setTwoWheelRobotSpeed	mobot_new.cpp	/^int CMobotGroup::setTwoWheelRobotSpeed(double speed, double radius)$/;"	f	class:CMobotGroup
setUltrasonic	nxt.cpp	/^int ChNXT::setUltrasonic(nxtSensorId_t id) {$/;"	f	class:ChNXT
sleepDuration	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.h	/^		double sleepDuration;$/;"	m	union:motion_s::data_u
sockaddr_t	mobot_internal.h	/^typedef SOCKADDR_BTH sockaddr_t;$/;"	t
sockaddr_t	mobot_internal.h	/^typedef struct sockaddr_rc sockaddr_t;$/;"	t	typeref:struct:sockaddr_rc
sockaddr_t	nxt_internal.h	/^typedef SOCKADDR_BTH sockaddr_t;$/;"	t
sockaddr_t	nxt_internal.h	/^typedef struct sockaddr_rc sockaddr_t;$/;"	t	typeref:struct:sockaddr_rc
socket	mobot_internal.h	/^  int socket;$/;"	m	struct:br_comms_s
socket	nxt_internal.h	/^  int socket;$/;"	m	struct:br_comms_s
stop	mobot.cpp	/^int CMobot::stop()$/;"	f	class:CMobot
stop	mobot.cpp	/^int CMobotGroup::stop()$/;"	f	class:CMobotGroup
stop	mobot_new.cpp	/^int CMobot::stop()$/;"	f	class:CMobot
stopAllJoints	mobot_new.cpp	/^int CMobot::stopAllJoints()$/;"	f	class:CMobot
stopAllJoints	mobot_new.cpp	/^int CMobotGroup::stopAllJoints()$/;"	f	class:CMobotGroup
stopAllJoints	nxt.cpp	/^int ChNXT::stopAllJoints(void){$/;"	f	class:ChNXT
stopAllJoints_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int stopAllJoints_chdl(void *varg) {$/;"	f
stopAllJoints_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int stopAllJoints_chdl(void *varg) {$/;"	f
stopAllSensors	nxt.cpp	/^int ChNXT::stopAllSensors(void){$/;"	f	class:ChNXT
stopMotion	nxt.cpp	/^int ChNXT::stopMotion(void){$/;"	f	class:ChNXT
stopMotion_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int stopMotion_chdl(void *varg) {$/;"	f
stopMotion_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int stopMotion_chdl(void *varg) {$/;"	f
stopOneJoint	mobot_new.cpp	/^int CMobot::stopOneJoint(mobotJointId_t id)$/;"	f	class:CMobot
stopOneJoint	mobot_new.cpp	/^int CMobotGroup::stopOneJoint(mobotJointId_t id)$/;"	f	class:CMobotGroup
stopOneJoint	nxt.cpp	/^int ChNXT::stopOneJoint(nxtJointId_t id){$/;"	f	class:ChNXT
stopOneJoint_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int stopOneJoint_chdl(void *varg) {$/;"	f
stopOneJoint_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int stopOneJoint_chdl(void *varg) {$/;"	f
stopThreeJoints	mobot_new.cpp	/^int CMobot::stopThreeJoints(mobotJointId_t id1, mobotJointId_t id2, mobotJointId_t id3)$/;"	f	class:CMobot
stopThreeJoints	mobot_new.cpp	/^int CMobotGroup::stopThreeJoints(mobotJointId_t id1, mobotJointId_t id2, mobotJointId_t id3)$/;"	f	class:CMobotGroup
stopTwoJoints	mobot_new.cpp	/^int CMobot::stopTwoJoints(mobotJointId_t id1, mobotJointId_t id2)$/;"	f	class:CMobot
stopTwoJoints	mobot_new.cpp	/^int CMobotGroup::stopTwoJoints(mobotJointId_t id1, mobotJointId_t id2)$/;"	f	class:CMobotGroup
stopTwoJoints	nxt.cpp	/^int ChNXT::stopTwoJoints(nxtJointId_t id1, nxtJointId_t id2){$/;"	f	class:ChNXT
stopTwoJoints_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int stopTwoJoints_chdl(void *varg) {$/;"	f
stopTwoJoints_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int stopTwoJoints_chdl(void *varg) {$/;"	f
stopUltrasonic	nxt.cpp	/^int ChNXT::stopUltrasonic(nxtSensorId_t id) {$/;"	f	class:ChNXT
str2ba	mobot.cpp	/^int str2ba(const char *str, bdaddr_t *ba)$/;"	f
str2ba	mobot_new.cpp	/^int str2ba(const char *str, bdaddr_t *ba)$/;"	f
strToba	nxt.cpp	/^int strToba(const char *str, bdaddr_t *ba)$/;"	f
test	nxt.cpp	/^int ChNXT::test(void) {$/;"	f	class:ChNXT
theApp	demos/iMobotController_Windows/iMobotController_Windows/iMobotController_Windows.cpp	/^CiMobotController_WindowsApp theApp;$/;"	v
thread	mobot_internal.h	/^  THREAD_T thread;$/;"	m	struct:br_comms_s
thread	nxt_internal.h	/^  THREAD_T thread;$/;"	m	struct:br_comms_s
time	mobot.h	/^  double *time;$/;"	m	struct:recordAngleArg_s
uint32_t	mobot_internal.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint32_t	nxt_internal.h	/^typedef unsigned __int32 uint32_t;$/;"	t
uint8_t	mobot_internal.h	/^typedef unsigned char uint8_t;$/;"	t
uint8_t	nxt_internal.h	/^typedef unsigned char uint8_t;$/;"	t
updateInputTypeMode	nxt.cpp	/^int ChNXT::updateInputTypeMode(nxtSensorId_t id) {$/;"	f	class:ChNXT
vehicleMotionWait	nxt.cpp	/^int ChNXT::vehicleMotionWait(void){$/;"	f	class:ChNXT
vehicleMotionWait_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int vehicleMotionWait_chdl(void *varg) {$/;"	f
vehicleMotionWait_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int vehicleMotionWait_chdl(void *varg) {$/;"	f
vehicleMoveBackwardNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int vehicleMoveBackwardNB_chdl(void *varg) {$/;"	f
vehicleMoveBackward_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int vehicleMoveBackward_chdl(void *varg) {$/;"	f
vehicleMoveForwardNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int vehicleMoveForwardNB_chdl(void *varg) {$/;"	f
vehicleMoveForward_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int vehicleMoveForward_chdl(void *varg) {$/;"	f
vehicleRollBackward	nxt.cpp	/^int ChNXT::vehicleRollBackward(double angle){$/;"	f	class:ChNXT
vehicleRollBackwardNB	nxt.cpp	/^int ChNXT::vehicleRollBackwardNB(double angle){$/;"	f	class:ChNXT
vehicleRollBackwardNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int vehicleRollBackwardNB_chdl(void *varg) {$/;"	f
vehicleRollBackward_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int vehicleRollBackward_chdl(void *varg) {$/;"	f
vehicleRollForward	nxt.cpp	/^int ChNXT::vehicleRollForward(double angle){$/;"	f	class:ChNXT
vehicleRollForwardNB	nxt.cpp	/^int ChNXT::vehicleRollForwardNB(double angle){$/;"	f	class:ChNXT
vehicleRollForwardNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int vehicleRollForwardNB_chdl(void *varg) {$/;"	f
vehicleRollForward_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int vehicleRollForward_chdl(void *varg) {$/;"	f
vehicleRotateLeft	nxt.cpp	/^int ChNXT::vehicleRotateLeft(double angle){$/;"	f	class:ChNXT
vehicleRotateLeftNB	nxt.cpp	/^int ChNXT::vehicleRotateLeftNB(double angle){$/;"	f	class:ChNXT
vehicleRotateLeftNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int vehicleRotateLeftNB_chdl(void *varg) {$/;"	f
vehicleRotateLeftNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int vehicleRotateLeftNB_chdl(void *varg) {$/;"	f
vehicleRotateLeft_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int vehicleRotateLeft_chdl(void *varg) {$/;"	f
vehicleRotateLeft_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int vehicleRotateLeft_chdl(void *varg) {$/;"	f
vehicleRotateRight	nxt.cpp	/^int ChNXT::vehicleRotateRight(double angle)$/;"	f	class:ChNXT
vehicleRotateRightNB	nxt.cpp	/^int ChNXT::vehicleRotateRightNB(double angle){$/;"	f	class:ChNXT
vehicleRotateRightNB_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int vehicleRotateRightNB_chdl(void *varg) {$/;"	f
vehicleRotateRightNB_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int vehicleRotateRightNB_chdl(void *varg) {$/;"	f
vehicleRotateRight_chdl	chnxt/chnxt_chdl.c	/^EXPORTCH int vehicleRotateRight_chdl(void *varg) {$/;"	f
vehicleRotateRight_chdl	chnxt/chnxt_chdl.cpp	/^EXPORTCH int vehicleRotateRight_chdl(void *varg) {$/;"	f
write	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^int ConfigFile::write()$/;"	f	class:ConfigFile
~CListCtrlContext	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlContext.cpp	/^CListCtrlContext::~CListCtrlContext(void)$/;"	f	class:CListCtrlContext
~CListCtrlCtx	demos/iMobotController_Windows/iMobotController_Windows/ListCtrlCtx.cpp	/^CListCtrlCtx::~CListCtrlCtx()$/;"	f	class:CListCtrlCtx
~CMobot	mobot.cpp	/^CMobot::~CMobot()$/;"	f	class:CMobot
~CMobot	mobot_new.cpp	/^CMobot::~CMobot() $/;"	f	class:CMobot
~CMobotGroup	mobot.cpp	/^CMobotGroup::~CMobotGroup()$/;"	f	class:CMobotGroup
~CMobotGroup	mobot_new.cpp	/^CMobotGroup::~CMobotGroup()$/;"	f	class:CMobotGroup
~CRecordMobot	demos/iMobotController_Windows/iMobotController_Windows/RecordMobot.cpp	/^CRecordMobot::~CRecordMobot(void)$/;"	f	class:CRecordMobot
~CTeachingDialog	demos/iMobotController_Windows/iMobotController_Windows/TeachingDialog.cpp	/^CTeachingDialog::~CTeachingDialog()$/;"	f	class:CTeachingDialog
~ChNXT	chnxt/chnxt.c	/^ChNXT::~ChNXT() {$/;"	f	class:ChNXT
~ChNXT	nxt.cpp	/^ChNXT::~ChNXT() {$/;"	f	class:ChNXT
~ConfigFile	demos/iMobotController_Windows/iMobotController_Windows/configFile.cpp	/^ConfigFile::~ConfigFile()$/;"	f	class:ConfigFile
~ConfigFileDialog	demos/iMobotController_Windows/iMobotController_Windows/configFileDialog.cpp	/^ConfigFileDialog::~ConfigFileDialog()$/;"	f	class:ConfigFileDialog
~RobotManager	demos/iMobotController_Windows/iMobotController_Windows/robotManager.cpp	/^RobotManager::~RobotManager()$/;"	f	class:RobotManager
